{"version":3,"sources":["app/App.js","app/Story.js","app/hud.js","app/initialize.js","app/scenes/BarnScene.js","app/scenes/Dialog.js","app/scenes/EggGameScene.js","app/scenes/EmilScene.js","app/scenes/EmmaScene.js","app/scenes/KarlScene.js","app/scenes/MainMenuScene.js","app/scenes/OfficeGameScene.js","app/scenes/PapaScene.js","app/scenes/PrefaceScene.js","app/scenes/Scene.js","app/scenes/SceneManager.js","app/scenes/ShopGameScene.js","app/scenes/TreehouseGameScene.js","app/utils.js"],"names":["require","register","exports","module","_interopRequireDefault","obj","__esModule","default","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_hud","_hud2","_utils","_SceneManager","_SceneManager2","_MainMenuScene","_MainMenuScene2","_PrefaceScene","_EmilScene","_TreehouseGameScene","_EmmaScene","_ShopGameScene","_PapaScene","_OfficeGameScene","_KarlScene","_EggGameScene","App","this","app_element","create_app_element","appendChild","get_scene_element","init","initialize_resize_listener","query","location","search","substr","split","scene","navigate","Function","bind","apply","concat","slice","e","console","log","value","create_element","render","document","body","resize_timeout_throttle","resize_timeout_id","window","addEventListener","resize_listener","event","_this","setTimeout","_","clearTimeout","resize_app","el","w","innerWidth","h","innerHeight","height","style","width","top","left","fontSize","getBoundingClientRect","app","_PrefaceScene2","_EmilScene2","_EmmaScene2","_TreehouseGameScene2","_ShopGameScene2","_PapaScene2","_OfficeGameScene2","_KarlScene2","_EggGameScene2","_BarnScene","_BarnScene2","Story","scenes","current_scene","_len","arguments","args","_key","push","empty_bag","play","stop","rewind","scene_data","enable_story_mode","story","add","skip","next","create_main_menu_button","attr","click","create_bag_box","adopt","create_bag","create_bag_button","flashlight","catfood","add_flashlight","classList","remove","add_catfood","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_interactjs","_interactjs2","_Dialog","_Dialog2","_Scene2","_Scene3","BarnScene","_Scene","getPrototypeOf","create_image","create_cat_target","create_dialog","dialog1","_this2","add_bubble","wait","say","switch_on_flashlight","dialog2","x","create_light_handle","create_light","cat_target","light","light_handle","draggable","onmove","freeze","handle","parseFloat","getAttribute","dx","y","dy","transform","setAttribute","onend","t","radius","midx","midy","distanceX","Math","abs","distanceY","distanceXsq","pow","distanceYsq","distance","sqrt","styleCursor","Timeout","callable","delay","remaining_time","__run","target_time","Date","timeout","state","clearInterval","toString","toSource","Dialog","bubbles","items","current","undefined","draft","name","bubble","type","add_text","add_callable","process_draft","text","time","argc","check_args","error","speaker","enter","textContent","exit","warn","item","pause","resume","cancel","max","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","done","err","EggGameScene","create_message_box","create_egg_box","brown_source","create_egg_source","create_egg","white_source","shuffle_problems","next_problem","problems","shuffle","range","problem","summand1","pop","summand2","problem_field","finish_timeout","show_message","box","message_box","message","message_box_timeout","_self$problem","a","b","_self$dimples$reduce","dimples","reduce","acc","dimple","childElementCount","firstChild","white","brown","clear_dimples","create_problem_field","forEach","create_dimple","d","removeChild","dropzone","overlap","ondragenter","ondragleave","ondropdeactivate","color","source","egg","onstart","interaction","dropElement","parentNode","removeAttribute","removeProperty","to_array","childNodes","check_finish","EmilScene","part","create_in_dialog","set_background","create_out_dialog","dialog","hud","dialog_init","_this3","number","setProperty","EmmaScene","KarlScene","create_mid_dialog","_this4","_Story","_Story2","MainMenuScene","create_story_buttons","create_menu_buttons","section","start","game_section","create_menu_button","OfficeGameScene","colors","missing_folders","map","shelf","missing","fill_shelf_with_folders","messageBox","dragContainer","m","col","nr","drop_target","create_draggable_folder","showMessage","zIndex","folder","parentElement","ondrop","space","relatedTarget","foldersNodelist","querySelectorAll","folders","correct_count","folder_space","space_type","folder_type","messageBoxTimeout","may_be_missing","missing_numbers","missing_index","floor","random","missing_number","splice","indexOf","right","create_folder","dropTarget","offset","folder_sprite_offset","yellow","blue","green","red","xOffset","yOffset","PapaScene","PrefaceScene","Scene","SceneManager","scene_element","create_scene_element","cleanup","new_scene","replaceChild","history","pushState","queryString","clean_scene","scene_manager","ShopGameScene","create_scale","create_source","create_finish_button","sum","less","create_item","reset_dishes","right_count","right_dish","scale","left_dish","left_count","item_type","fixed","dish","parent","new_item","TreehouseGameScene","create_toolbox","create_sink","nail_count","sink","clear_sink","nail","create_nail","parentOffset","nailOffset","x0","y0","sinkOffset","minLeft","minTop","maxLeft","maxTop","min","make_nail_draggable","startOrEnd","end","step","shuffled","array","rand","tag","DomElementDraft","array_like","_typeof","createElement","clazz","_id","property","_text","child","func"],"mappings":"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","file":"docs/app.js.map","sourcesContent":["import hud from 'hud';\nimport {create_element} from 'utils';\nimport scene_manager from './scenes/SceneManager';\nimport MainMenuScene from './scenes/MainMenuScene';\nimport PrefaceScene from './scenes/PrefaceScene';\nimport EmilScene from './scenes/EmilScene';\nimport TreehouseGameScene from './scenes/TreehouseGameScene';\nimport EmmaScene from './scenes/EmmaScene';\nimport ShopGameScene from './scenes/ShopGameScene';\nimport PapaScene from './scenes/PapaScene';\nimport OfficeGameScene from './scenes/OfficeGameScene';\nimport KarlScene from './scenes/KarlScene';\nimport EggGameScene from './scenes/EggGameScene';\n\nclass App {\n\n    constructor() {\n        this.app_element = this.create_app_element();\n\n        this.app_element.appendChild(scene_manager.get_scene_element());\n        this.app_element.appendChild(hud.init());\n\n        this.initialize_resize_listener();\n\n        try {\n            const query = location.search.substr(1).split(\"/\");\n            const scene = require('./scenes/' + query[0]);\n            scene_manager.navigate(new scene.default(...query.slice(1)));\n        } catch(e) {\n            scene_manager.navigate(new MainMenuScene());\n        }\n\n        console.log('initialized');\n    }\n\n    create_app_element() {\n        const app_element = create_element('div').class('app').render();\n        document.body.appendChild(app_element);\n        return app_element;\n    }\n\n    initialize_resize_listener() {\n        this.resize_timeout_throttle = false;\n        this.resize_timeout_id = null;\n        window.addEventListener('resize', this.resize_listener.bind(this));\n        this.resize_listener();\n    }\n\n    resize_listener(event) {\n\n        if(this.resize_timeout_throttle)\n            return;\n        this.resize_timeout_throttle = true;\n\n        setTimeout(_ => this.resize_timeout_throttle = false, 500);\n\n        clearTimeout(this.resize_timeout_id);\n        this.resize_timeout_id = setTimeout(this.resize_app.bind(this), 750);\n    }\n\n    resize_app() {\n        this.resize_timeout_id = null;\n        const el = this.app_element,\n              w = window.innerWidth,\n              h = window.innerHeight,\n              height = w / 16 * 9;\n\n        if(height < h) {\n            // max width\n            el.style.height = height + \"px\";\n            el.style.width = \"100%\";\n            el.style.top = (h - height) / 2 + \"px\";\n            el.style.left = \"\";\n        } else {\n            // max height\n            const width = h / 9 * 16;\n            el.style.height = \"100%\";\n            el.style.width = width + \"px\";\n            el.style.top = \"\";\n            el.style.left = (w - width) / 2 + \"px\";\n        }\n        el.style.fontSize = el.getBoundingClientRect()['height'] / 100 + \"px\";\n    }\n\n}\n\nconst app = new App();\nmodule.exports = app;\n","import scene_manager from './scenes/SceneManager';\nimport MainMenuScene from './scenes/MainMenuScene';\nimport PrefaceScene from './scenes/PrefaceScene';\nimport EmilScene from './scenes/EmilScene';\nimport EmmaScene from './scenes/EmmaScene';\nimport TreehouseGameScene from './scenes/TreehouseGameScene';\nimport ShopGameScene from './scenes/ShopGameScene';\nimport PapaScene from './scenes/PapaScene';\nimport OfficeGameScene from './scenes/OfficeGameScene';\nimport KarlScene from './scenes/KarlScene';\nimport EggGameScene from './scenes/EggGameScene';\nimport BarnScene from './scenes/BarnScene';\n\nclass Story {\n    constructor() {\n        this.scenes = [];\n        this.current_scene = 0;\n    }\n\n    add(scene, ...args) {\n        this.scenes.push({scene: scene, args: args});\n        return this;\n    }\n\n    rewind() {\n        require('hud').empty_bag();\n        this.current_scene = 0;\n    }\n\n    next() {\n        this.current_scene = this.current_scene + 1;\n        if(this.current_scene < this.scenes.length) {\n            this.play();\n        } else {\n            this.stop();\n        }\n    }\n\n    stop() {\n        this.rewind();\n        scene_manager.navigate(new MainMenuScene());\n    }\n\n    start() {\n        this.rewind();\n        this.play();\n    }\n\n    play() {\n        if(this.current_scene >= this.scenes.length) {\n            return;\n        }\n        const scene_data = this.scenes[this.current_scene],\n              scene = new scene_data.scene(...scene_data.args);\n\n        scene.enable_story_mode(this);\n        scene_manager.navigate(scene);\n    }\n}\n\nconst story = new Story();\nstory.add(PrefaceScene)\n     .add(EmilScene, 'in')\n     .add(TreehouseGameScene)\n     .add(EmilScene, 'out')\n     .add(EmmaScene, 'in')\n     .add(ShopGameScene)\n     .add(EmmaScene, 'out')\n     .add(PapaScene, 'in')\n     .add(OfficeGameScene)\n     .add(PapaScene, 'out')\n     .add(KarlScene, 'in')\n     .add(EggGameScene)\n     .add(KarlScene, 'mid')\n     .add(BarnScene)\n     .add(KarlScene, 'out');\n\nwindow.skip = story.next.bind(story);\n\nmodule.exports = story;\n","import {create_element} from 'utils';\nimport MainMenuScene from './scenes/MainMenuScene';\nimport scene_manager from './scenes/SceneManager';\n\nlet flashlight, catfood;\n\nfunction create_main_menu_button() {\n    return create_element('img')\n            .attr('src', 'img/home_button.png')\n            .class('hud_mainmenu')\n            .click(e => scene_manager.navigate(new MainMenuScene()))\n            .render();\n};\nfunction create_bag_box() {\n    return create_element('div')\n            .class('hud_bag_box')\n            .adopt(create_bag())\n            .adopt(create_bag_button())\n            .render();\n};\nfunction create_bag() {\n    flashlight = create_element('img')\n            .attr('src', 'img/flashlight.png')\n            .class('bag_item')\n            .class('bag_item_hidden')\n            .render();\n\n    catfood = create_element('img')\n            .attr('src', 'img/catfood.png')\n            .class('bag_item')\n            .class('bag_item_hidden')\n            .render();\n\n    return create_element('div')\n            .class('hud_bag')\n            .adopt(flashlight)\n            .adopt(catfood)\n            .render();\n};\nfunction create_bag_button() {\n    return create_element('img')\n            .attr('src', 'img/bag_button.png')\n            .class('hud_bag_button')\n            .render();\n};\nfunction init() {\n    return create_element('div')\n            .class('hud')\n            .adopt(create_main_menu_button())\n            .adopt(create_bag_box())\n            .render();\n};\n\nfunction add_flashlight() {\n    flashlight.classList.remove('bag_item_hidden');\n}\nfunction add_catfood() {\n    catfood.classList.remove('bag_item_hidden');\n}\n\nfunction empty_bag() {\n    flashlight.classList.add('bag_item_hidden');\n    catfood.classList.add('bag_item_hidden');\n}\n\nmodule.exports = {\n    init: init,\n    add_flashlight: add_flashlight,\n    add_catfood: add_catfood,\n    empty_bag: empty_bag\n};\n\n","document.addEventListener('DOMContentLoaded', () => {\n    require('App');\n});\n","import {create_element} from '../utils';\nimport interact from 'interactjs';\nimport Dialog from './Dialog';\nimport Scene from './Scene';\n\nexport default class BarnScene extends Scene {\n\n    render(scene) {\n        this.scene = scene;\n\n        scene.classList.add('barn');\n\n        scene.appendChild(this.create_image());\n        scene.appendChild(this.create_cat_target());\n\n        this.create_dialog();\n\n        this.dialog1.play();\n    }\n\n    create_dialog() {\n        this.dialog1 = new Dialog();\n        this.scene.appendChild(this.dialog1.add_bubble(\"finn1\"));\n        this.dialog1\n            .do(function() {})\n            .wait(1000)\n\n            .let('finn1')\n            .say('Oh, hier ist es aber ganz schön dunkel. Zum Glück hat '\n                    + 'mir Emil die Taschenlampe geliehen.')\n            .wait(6000)\n\n            .do(this.switch_on_flashlight.bind(this))\n            .wait(500)\n\n            .let('finn1')\n            .say('Schon besser. Mal sehen, ob wir Lucy jetzt finden können')\n            .wait(3000);\n\n        this.dialog2 = new Dialog();\n        this.scene.appendChild(this.dialog2.add_bubble(\"finn2\"));\n        this.dialog2\n            .let('finn2')\n            .say('Da ist sie! Komm Lucy, komm raus, aus deinem Versteck!')\n            .wait(4000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    switch_on_flashlight() {\n        this.scene.appendChild(this.create_light_handle());\n        this.scene.appendChild(this.create_light());\n    }\n\n    create_cat_target() {\n        this.cat_target = create_element('div')\n            .class('cat_target')\n            .render();\n        return this.cat_target;\n    }\n    create_image() {\n        return create_element('div')\n            .class('image')\n            .render();\n    }\n\n    create_light() {\n        this.light = create_element('div')\n            .class('light')\n            .render();\n        return this.light;\n    }\n\n    create_light_handle() {\n        const light_handle = create_element('div')\n            .class('light_handle')\n            .render(),\n              self = this;\n\n        interact(light_handle).draggable({\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const light = self.light,\n                      handle = light_handle,\n                      x = (parseFloat(handle.getAttribute(\"data-x\")) || 0) + e.dx,\n                      y = (parseFloat(handle.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                light.style.transform = `translate(${x}px, ${y}px)`;\n                handle.style.transform = `translate(${x}px, ${y}px)`;\n                handle.setAttribute('data-x', x);\n                handle.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const handle = e.target,\n                      t = self.cat_target.getBoundingClientRect(),\n                      h = handle.getBoundingClientRect(),\n                      radius = h.width/2,\n                      midx = radius + h.left,\n                      midy = radius + h.top,\n                      distanceX = Math.abs(midx - t.left),\n                      distanceY = Math.abs(midy - t.top),\n                      distanceXsq = Math.pow(distanceX, 2),\n                      distanceYsq = Math.pow(distanceY, 2),\n                      distance = Math.sqrt(distanceXsq + distanceYsq);\n\n                if(distance < radius * 0.8) {\n                    self.freeze = true;\n                    self.dialog2.play();\n                }\n            }\n        }).styleCursor(false);\n\n        return light_handle;\n    }\n\n    cleanup(scene) {\n        this.dialog1 && this.dialog1.stop();\n        this.dialog2 && this.dialog2.stop();\n    }\n}\n","import {check_args, create_element} from \"../utils\";\n\nclass Timeout {\n    constructor(callable, delay) {\n        this.remaining_time = delay;\n        this.callable = callable;\n        this.__run(delay);\n    }\n\n    __run(delay) {\n        const self = this;\n        self.target_time = delay + (+new Date());\n        self.timeout = setTimeout(function() {\n            self.state = 'completed';\n            self.remaining_time = 0;\n            self.callable();\n        }, delay);\n        self.state = 'running';\n    }\n\n    pause() {\n        clearInterval(this.timeout);\n        if(this.state == 'running') {\n            this.remaining_time = this.target_time - (+new Date());\n            if(this.remaining_time < 1) {\n                this.state = 'cancelled';\n            } else {\n                this.state = 'paused';\n            }\n        }\n    }\n\n    resume() {\n        if(this.state == 'paused') {\n            this.__run(this.remaining_time);\n        }\n    }\n\n    cancel() {\n        clearInterval(this.timeout);\n        if(this.state !== 'completed') {\n            this.state = 'cancelled';\n            this.remaining_time = 0;\n        }\n    }\n\n    toString() {\n        return `Timeout ${this.state}; ${this.remaining_time} remaining`;\n    }\n\n    toSource() {\n        return `${this.toString()}; ${this.callable.toSource()}`;\n    }\n}\n\nexport default class Dialog {\n\n    constructor() {\n        this.bubbles = {};\n        this.items = [];\n        this.current = 0;\n        this.timeout = undefined;\n        this.draft = undefined;\n    }\n\n    add_bubble(name) {\n        const bubble = create_element(\"div\")\n                .class('dialog_bubble')\n                .class('dialog_bubble_' + name)\n                .click(this.next.bind(this))\n                .render();\n        this.bubbles[name] = bubble;\n        return bubble;\n    }\n\n    process_draft() {\n        if(this.draft != undefined) {\n            if(this.draft.type == 'text') {\n                this.add_text.apply(this, this.draft.args);\n            } else {\n                this.add_callable.apply(this, this.draft.args);\n            }\n            this.draft = undefined;\n        }\n    }\n\n    let(name) {\n        this.process_draft();\n        this.draft = {type: 'text', args: [name, '', 0]};\n        return this;\n    }\n\n    say(text) {\n        if(this.draft == undefined) {\n            throw \"Who shall say that?! Give me a name via let() first\";\n        }\n        if(this.draft.type != 'text') {\n            throw \"A function cannot say anything\";\n        }\n        this.draft.args[1] = text;\n        return this;\n    }\n\n    do(callable) {\n        this.process_draft();\n        this.draft = {type: 'func', args: [callable, null, 0]};\n        return this;\n    }\n\n    wait(time) {\n        if(this.draft == undefined) {\n            throw \"Nothing to do for that amount of time\";\n        }\n        this.draft.args[2] = time;\n        return this;\n    }\n\n    then(callable) {\n        if(this.draft == undefined) {\n            throw \"No draft to append this exit function to\";\n        }\n        if(this.draft.type != 'func') {\n            throw \"Cannot append exit function to text item\";\n        }\n        this.draft.args[1] = callable;\n        return this;\n    }\n\n    add() {\n        const argc = arguments.length;\n\n        if(argc == 2 && check_args(arguments, \"function\", \"number\")) {\n            this.add_callable.call(this, arguments[0], null, arguments[1]);\n        } else if(argc == 3 && check_args(arguments, \"function\", \"function\", \"number\")) {\n            this.add_callable.apply(this, arguments);\n        } else if(argc == 3 && check_args(arguments, \"string\", \"string\", \"number\")) {\n            this.add_text.apply(this, arguments);\n        } else {\n            console.error('Cannot identify parameters', arguments);\n        }\n        return this;\n    }\n\n    add_text(speaker, text, time) {\n        if(speaker in this.bubbles) {\n            const bubble = this.bubbles[speaker],\n                  enter = function() {\n                      bubble.classList.add('dialog_bubble_visible');\n                      bubble.textContent = text;\n                  },\n                  exit = function() {\n                      bubble.classList.remove('dialog_bubble_visible');\n                      bubble.textContent = '';\n                  };\n            this.add_callable(enter, exit, time);\n        } else {\n            console.warn(`cannot add text, since speaker ${speaker} has no bubble`);\n        }\n    }\n\n    create_speaker_function(bubble, text) {\n        return function() {\n            bubble.textContent = text;\n        }\n    }\n\n    add_callable(enter, exit, time) {\n        this.items.push({callable: enter, time: time});\n        if(exit !== null) {\n            this.items.push({callable: exit, time: 0});\n        }\n    }\n\n    play() {\n        this.process_draft();\n        const item = this.items[this.current];\n        if(item !== undefined) {\n            item.callable();\n            this.timeout = new Timeout(this.play.bind(this), item.time);\n            this.current = this.current + 1;\n        }\n        return this;\n    }\n\n    pause() {\n        this.timeout.pause();\n        return this;\n    }\n\n    resume() {\n        this.timeout.resume();\n        return this;\n    }\n\n    rewind() {\n        const state = this.timeout.state;\n        this.timeout.cancel();\n        this.current = 0;\n        if(state == 'playing') {\n            this.play();\n        }\n        return this;\n    }\n\n    prev() {\n        this.current = Math.max(0, this.current - 2);\n        return this;\n    }\n\n    next() {\n        this.timeout.cancel();\n        this.play();\n        return this;\n    }\n\n    stop() {\n        this.timeout.cancel();\n        return this;\n    }\n}\n","import interact from 'interactjs';\nimport {range, to_array, shuffle, create_element} from '../utils';\nimport Scene from './Scene';\n\nexport default class EggGameScene extends Scene {\n\n    render(scene) {\n\n        scene.classList.add('egg_game');\n        scene.appendChild(this.create_message_box());\n\n        scene.appendChild(this.create_egg_box());\n\n        const brown_source = this.create_egg_source('brown');\n        this.create_egg(brown_source);\n        scene.appendChild(brown_source);\n\n        const white_source = this.create_egg_source('white');\n        this.create_egg(white_source);\n        scene.appendChild(white_source);\n\n        this.shuffle_problems();\n        this.next_problem();\n\n    }\n\n    shuffle_problems() {\n        this.problems = shuffle(range(7));\n    }\n\n    next_problem(problem) {\n        if(this.problems.length > 0) {\n            const summand1 = this.problems.pop(),\n                  summand2 = 6 - summand1;\n            this.problem = [summand1, summand2];\n            this.problem_field.textContent = `${summand1} + ${summand2} = 6`;\n            return true;\n        } else {\n            this.problem = undefined;\n            this.problem_field.textContent = \"\";\n\n            if(this.story) {\n                this.finish_timeout = setTimeout(x => this.story.next(), 1000);\n            } else {\n                this.show_message(\"Sehr gut! Du hast alle Aufgaben gelöst!\");\n            }\n\n            return false;\n        }\n    }\n\n    create_message_box() {\n        const box = create_element('div')\n                .class('message_box')\n                .render();\n        this.message_box = box;\n        return box;\n    }\n    show_message(message) {\n        const box = this.message_box;\n        box.textContent = message;\n        box.classList.add('active');\n        clearTimeout(this.message_box_timeout);\n        this.message_box_timeout = setTimeout(function() {\n            box.classList.remove('active');\n        }, 3000);\n    }\n\n    check_finish() {\n        const self = this,\n              [a, b] = self.problem,\n              {brown, white} = self.dimples.reduce(function(acc, dimple) {\n                  if(dimple.childElementCount > 0) {\n                      acc[dimple.firstChild.getAttribute('data-color')] += 1;\n                  }\n                  return acc;\n              }, {white: 0, brown: 0});\n\n        if(brown + white >= 6) {\n            if(a == brown && b == white || a == white && b == brown) {\n                self.freeze = true;\n                self.show_message(\"Richtig!\");\n                setTimeout(function() { \n                    self.clear_dimples();\n                    if(self.next_problem()) {\n                        self.freeze = false;\n                    }\n                }, 3000);\n            } else {\n                self.show_message(\"Leider falsch. Schau nochmal genau hin!\");\n            }\n        }\n    }\n\n    create_egg_box() {\n        const self = this,\n              box = create_element('div')\n                .class('egg_box')\n                .adopt(this.create_problem_field());\n\n        this.dimples = [];\n        range(6).forEach(function(i) {\n            const dimple = self.create_dimple(i);\n            box.adopt(dimple);\n            self.dimples.push(dimple);\n        });\n\n        return box.render();\n    }\n\n    clear_dimples() {\n        this.dimples.forEach(d => d.removeChild(d.firstChild));\n    }\n\n    create_problem_field() {\n        this.problem_field = create_element('div')\n                .class('problem_field')\n                .render();\n        return this.problem_field;\n    }\n\n    create_dimple(i) {\n        const self = this,\n              dimple = create_element('div')\n                .class('egg_dimple')\n                .class('egg_dimple_' + i)\n                .render();\n\n        interact(dimple).dropzone({\n            overlap: 0.25,\n            ondragenter: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.add('drop-target');\n            },\n            ondragleave: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('drop-target');\n            },\n            ondropdeactivate: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('drop-target');\n            }\n        });\n        return dimple;\n    }\n\n    create_egg_source(color) {\n        return create_element('div')\n                .class('egg_source')\n                .class('egg_source_' + color)\n                .class('egg')\n                .class(color + '_egg')\n                .attr('data-color', color)\n                .render()\n    }\n\n    create_egg(source) {\n        const self = this,\n              color = source.getAttribute('data-color'),\n              egg = create_element('div')\n                .class('egg')\n                .class('egg_draggable')\n                .class(color + '_egg')\n                .attr('data-color', color)\n                .render();\n\n        interact(egg).draggable({\n            onstart: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('egg_in_box');\n            },\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const target = e.target,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const egg = e.target,\n                      dimple = e.interaction.dropElement;\n\n                if(dimple == null) {\n                    egg.parentNode.removeChild(egg);\n                } else {\n                    egg.removeAttribute('data-x');\n                    egg.removeAttribute('data-y');\n                    egg.style.removeProperty('transform');\n                    egg.classList.add('egg_in_box')\n\n                    to_array(dimple.childNodes).forEach(function(egg) {\n                        dimple.removeChild(egg);\n                    });\n                    dimple.appendChild(egg);\n                }\n\n                self.create_egg(source);\n                self.check_finish();\n            }\n        }).styleCursor(false);\n\n        source.appendChild(egg);\n    }\n\n    cleanup(scene) {\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class EmilScene extends Scene {\n\n    constructor(part) {\n        super();\n        this.part = part || 'in';\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('emil');\n\n        if(this.part == 'in') {\n            this.create_in_dialog();\n            this.set_background('01');\n        } else {\n            this.create_out_dialog();\n            this.set_background('03');\n        }\n\n        this.dialog.play();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"emil\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_in_dialog() {\n        const hud = require('../hud');\n        this.dialog_init()\n            .do(function() {})\n            .wait(1000)\n\n            .let(\"finn\")\n            .say(\"Hallo Emil! Was machst du da?\")\n            .wait(3000)\n\n            .let(\"emil\")\n            .say(\"Hallo Finn! Ich baue mir ein Baumhaus. Der Boden ist schon fertig!\")\n            .wait(4000)\n\n            .let(\"finn\")\n            .say(\"Wow, das sieht schon gut aus! Sag mal, hast du Lucy gesehen?\")\n            .wait(4000)\n\n            .let(\"emil\")\n            .say(\"Nein, heute noch nicht. Ist sie denn weg?\")\n            .wait(3000)\n\n            .let(\"finn\")\n            .say(\"Ja, ich war vorhin mit ihr im Garten und während ich kurz im Haus war, ist sie verschwunden.\")\n            .wait(5000)\n\n            .let(\"emil\")\n            .say(\"Oh nein, hoffentlich findest du sie bald wieder. In meinem Werkzeugkoffer ist eine \"\n                     + \"Taschenlampe. Ich leihe sie dir gerne aus, dann kannst du Lucy auch finden, wenn sie \"\n                     + \"sich irgendwo versteckt hat.\")\n            .wait(10000)\n\n            .do(this.set_background.bind(this, '02'))\n            .wait(100)\n\n            .do(hud.add_flashlight.bind(hud))\n            .wait(900)\n\n            .let(\"finn\")\n            .say(\"Vielen Dank, ich werde gut darauf aufpassen!\")\n            .wait(3000)\n\n            .let(\"emil\")\n            .say(\"Finn, kannst du mir kurz helfen? Ich muss \"\n                     + \"diese Bretter festnageln, aber die Nägel sind \"\n                     + \"in meinem Werkzeugkoffer. Kannst du sie \"\n                     + \"mir geben?\")\n            .wait(7000)\n\n            .let(\"finn\")\n            .say(\"Klar, ich helfe dir gerne! Wieviele Nägel \"\n                     + \"brauchst du?\")\n            .wait(4000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_out_dialog() {\n        this.dialog_init()\n            .let(\"emil\")\n            .say(\"Super, vielen Dank! Du warst mir eine große Hilfe!\")\n            .wait(3500)\n\n            .let(\"finn\")\n            .say(\"Gern geschehen! Ich muss jetzt weiter, damit \"\n                         + \"ich Lucy bald wieder finde!\")\n            .wait(4000)\n\n            .let(\"emil\")\n            .say(\"Okay, viel Glück!\")\n            .wait(2500)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    set_background(number) {\n        this.scene.style.setProperty('background-image', \n                                     `url(img/emil_scene_${number}.png)`);\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class EmmaScene extends Scene {\n\n    constructor(part) {\n        super();\n        this.part = part || 'in';\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('emma');\n\n        if(this.part == 'in') {\n            this.create_in_dialog();\n            this.set_background('01');\n        } else {\n            this.create_out_dialog();\n            this.set_background('03');\n        }\n\n        this.dialog.play();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"emma\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_in_dialog() {\n        this.dialog_init()\n            .let('emma')\n            .say('Hallo Finn! Das ist aber schön, dass du vorbeischaust! '\n                    + 'Möchtest du mir beim Wiegen helfen?')\n            .wait(6000)\n\n            .let('finn')\n            .say('Oh ja, das mach ich gerne!')\n            .wait(3000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_out_dialog() {\n        const hud = require('../hud');\n        this.dialog_init()\n            .let('emma')\n            .say('Vielen Dank, Finn! Das hast du super gemacht!')\n            .wait(3000)\n\n            .let('finn')\n            .say('Danke, es hat mir viel Spaß gemacht! Jetzt muss ich aber weiter. '\n                    + 'Ich bin auf der Suche nach Lucy, sie ist mir weggelaufen.')\n            .wait(8000)\n\n            .let('emma')\n            .say('Hier, ich gebe dir noch ein paar Katzenleckerlis mit, '\n                    + 'dann kannst du Lucy aus ihrem Versteck locken. '\n                    + 'Viel Glück bei deiner Suche!')\n            .wait(8000)\n\n            .do(hud.add_catfood.bind(hud))\n            .wait(1000)\n\n            .let('finn')\n            .say('Danke!')\n            .wait(2000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    set_background(number) {\n        this.scene.style.setProperty('background-image',\n                                     `url(img/emma_scene_${number}.png)`);\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class KarlScene extends Scene {\n\n    constructor(part) {\n        super();\n        this.part = part || 'in';\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('karl');\n\n        if(this.part == 'in') {\n            this.create_in_dialog();\n            this.set_background('01');\n        } else if(this.part == 'mid') {\n            this.create_mid_dialog();\n            this.set_background('02');\n        } else {\n            this.create_out_dialog();\n            this.set_background('03');\n        }\n\n        this.dialog.play();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"karl\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_in_dialog() {\n        this.dialog_init()\n            .let('karl')\n            .say('Hallo Finn! Na, magst du mir wieder beim Eier einpacken '\n                    + 'helfen?')\n            .wait(6000)\n\n            .let('finn')\n            .say('Hallo Karl! Sehr gerne!')\n            .wait(3000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_mid_dialog() {\n        this.dialog_init()\n            .let('karl')\n            .say('Gute Arbeit, Finn! Dann kann ich morgen früh direkt auf den '\n                    + 'Markt fahren und die Eier verkaufen!')\n            .wait(6000)\n\n            .let('finn')\n            .say('Danke, das hab ich gern gemacht! Sag mal Karl, hast du '\n                    + 'vielleicht Lucy gesehen?')\n            .wait(5000)\n\n            .let('karl')\n            .say('Lass mal überlegen…')\n            .wait(3000)\n\n            .let('karl')\n            .say('Nein, aber ich war auch den ganzen Tag mit dem Traktor '\n                    + 'auf dem Feld. Aber sieh doch mal in der Scheune nach. '\n                    + 'Da war sie ja schon öfters.')\n            .wait(7500)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_out_dialog() {\n        this.dialog_init()\n            .let('finn')\n            .say('Schau mal, Karl! ich habe Lucy wieder gefunden!')\n            .wait(4000)\n\n            .let('karl')\n            .say('Das freut mich! Ich hab mir doch gleich gedacht, dass sie '\n                    + 'sich wieder in der Scheune versteckt haben wird!')\n            .wait(6000)\n\n            .let('finn')\n            .say('Danke, dass du mir geholfen hast! Wenn du Lust hast, komm '\n                    + 'mich wieder besuchen und wir können wieder Emma im '\n                    + 'Laden helfen oder Papas Ordner einsortieren!')\n            .wait(10000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    set_background(number) {\n        this.scene.style.setProperty('background-image',\n                                     `url(img/papa_scene_${number}.png)`);\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport story from 'Story';\nimport scene_manager from './SceneManager';\nimport PrefaceScene from './PrefaceScene';\nimport EmilScene from './EmilScene';\nimport EmmaScene from './EmmaScene';\nimport TreehouseGameScene from './TreehouseGameScene';\nimport ShopGameScene from './ShopGameScene';\nimport PapaScene from './PapaScene';\nimport OfficeGameScene from './OfficeGameScene';\nimport KarlScene from './KarlScene';\nimport EggGameScene from './EggGameScene';\n\nexport default class MainMenuScene extends Scene {\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('main_menu');\n\n        this.create_story_buttons();\n        this.create_menu_buttons();\n\n        /*\n        this.create_menu_button('Eingangsszene', PrefaceScene);\n        this.create_menu_button('Bei Emil - Teil 1', EmilScene, 'in');\n        this.create_menu_button('Bei Emil - Teil 2', EmilScene, 'out');\n        this.create_menu_button('Bei Emma - Teil 1', EmmaScene, 'in');\n        this.create_menu_button('Bei Emma - Teil 2', EmmaScene, 'out');\n        this.create_menu_button('Bei Papa - Teil 1', PapaScene, 'in');\n        this.create_menu_button('Bei Papa - Teil 2', PapaScene, 'out');\n        this.create_menu_button('Bei Karl - Teil 1', KarlScene, 'in');\n        this.create_menu_button('Bei Karl - Teil 2', KarlScene, 'mid');\n        this.create_button_placeholder('In der Scheune');\n        this.create_menu_button('Bei Karl - Teil 3', KarlScene, 'out');\n        */\n    }\n\n    create_story_buttons() {\n        const section = create_element('div')\n            .class('section');\n\n        section.adopt(create_element('div')\n            .class('heading')\n            .class('heading_story')\n            .text(\"Geschichte spielen\")\n            .render());\n\n        section.adopt(create_element('div')\n            .class('btn')\n            .class('btn_play_story')\n            .click(e => story.start())\n            .text(\"Von vorne starten\")\n            .render());\n\n        section.adopt(create_element('div')\n            .class('btn')\n            .class('btn_resume_story')\n            .click(e => story.play())\n            .text(\"Weiterspielen\")\n            .render());\n\n        this.scene.appendChild(section.render());\n    }\n\n    create_menu_buttons() {\n        const section = create_element('div')\n            .class('section');\n\n        this.game_section = section.render();\n\n        section.adopt(create_element('div')\n            .class('heading')\n            .class('heading_games')\n            .click(e => story.play())\n            .text(\"Einzelspiele spielen\")\n            .render());\n\n        this.create_menu_button('Nägel zählen', TreehouseGameScene);\n        this.create_menu_button('Artikel wiegen', ShopGameScene);\n        this.create_menu_button('Ordner sortieren', OfficeGameScene);\n        this.create_menu_button('Eier einpacken', EggGameScene);\n\n        this.scene.appendChild(section.render());\n    }\n\n    create_button_placeholder(text) {\n        this.scene.appendChild(create_element('div')\n            .class('btn')\n            .class('button_placeholder')\n            .text(text)\n            .render());\n    }\n\n    create_menu_button(text, target, ...args) {\n        this.game_section.appendChild(create_element('div')\n            .class('btn')\n            .click(e => scene_manager.navigate(new target(...args)))\n            .text(text)\n            .render());\n    }\n\n    cleanup(scene) {\n    }\n}\n","import interact from 'interactjs';\nimport {create_element} from '../utils';\nimport {range, shuffle, to_array} from '../utils';\nimport Scene from './Scene';\n\nexport default class OfficeGameScene extends Scene {\n\n    render(scene) {\n        var self = this;\n\n        scene.classList.add('office_game');\n\n        const colors = ['blue', 'green', 'red'];\n        let missing_folders = [];\n        range(4).map(function(i) {\n            const shelf = create_element('div')\n                    .class('shelf')\n                    .class('shelf' + i)\n                    .render();\n            if(i < 3) {\n                const missing = self.fill_shelf_with_folders(shelf, colors[i], 3);\n                missing_folders = missing_folders.concat(missing);\n            } else {\n                self.fill_shelf_with_folders(shelf, 'yellow', 0);\n            }\n            scene.appendChild(shelf);\n            return shelf;\n        });\n\n        self.messageBox = create_element('div').class('message_box').render();\n        scene.appendChild(self.messageBox);\n\n        self.dragContainer = create_element('div')\n                .class('drag_container')\n                .render();\n\n        shuffle(missing_folders).forEach(function(m) {\n            const { color: col, number: nr, drop_target: target } = m,\n                  missing = self.create_draggable_folder(col, nr, target);\n            self.dragContainer.appendChild(missing);\n        });\n\n        scene.appendChild(create_element('div')\n                .class('drag_shadow')\n                .adopt(self.dragContainer)\n                .render());\n\n        self.showMessage(\"Sortiere die Ordner nach Farbe und Nummer ins Regal!\");\n\n        interact('.draggable_folder').draggable({\n            onstart: function(e) {\n                e.target.style.zIndex = 1;\n            },\n            onmove: function(e) {\n                const target = e.target,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                e.target.style.zIndex = '';\n                if(e.interaction.dropElement == null) {\n                    const folder = e.target;\n                    folder.removeAttribute('data-x');\n                    folder.removeAttribute('data-y');\n                    folder.style.transform = '';\n                    if(folder.parentElement != self.dragContainer) {\n                        self.dragContainer.appendChild(folder);\n                    }\n                }\n                self.check_finish();\n            }\n        }).styleCursor(false);\n        interact('.folder_space').dropzone({\n            overlap: 0.5,\n            ondragenter: function(e) {\n                e.target.classList.add('drop-target');\n            },\n            ondragleave: function(e) {\n                e.target.classList.remove('drop-target');\n            },\n            ondrop: function(e) {\n                const space = e.target,\n                      folder = e.relatedTarget;\n\n                folder.style.transform = '';\n\n                if(space.childElementCount > 0) {\n                    to_array(space.childNodes).forEach(function(folder) {\n                        self.dragContainer.appendChild(folder);\n                    });\n                }\n                space.appendChild(folder);\n            },\n            ondropdeactivate: function(e) {\n                const folder = e.relatedTarget;\n                folder.removeAttribute('data-x');\n                folder.removeAttribute('data-y');\n                folder.style.transform = 0;\n                e.target.classList.remove('drop-target');\n            }\n        });\n    }\n\n    check_finish() {\n        if(this.dragContainer.childElementCount == 0) {\n            const foldersNodelist = document.querySelectorAll('.draggable_folder'),\n                  folders = to_array(foldersNodelist),\n                  correct_count = folders.reduce(function(acc, folder) {\n                      const folder_space = folder.parentElement,\n                            space_type = folder_space.getAttribute('data-type'),\n                            folder_type = folder.getAttribute('data-type');\n                      if(space_type == folder_type) {\n                          return acc + 1;\n                      } else {\n                          return acc;\n                      }\n                  }, 0);\n\n            if(correct_count == 9) {\n                if(this.story) {\n                    this.showMessage(\"Sehr gut!!\");\n                    this.finish_timeout = setTimeout(x => this.story.next(), 3000);\n                } else {\n                    this.show_message(\"Sehr gut! Du hast alle Aufgaben gelöst!\");\n                }\n            } else {\n                this.showMessage(\"Leider falsch. Schau nochmal genau hin!\");\n            }\n        }\n    }\n\n    showMessage(message) {\n        const box = this.messageBox;\n        box.textContent = message;\n        box.classList.add('active');\n        clearTimeout(this.messageBoxTimeout);\n        this.messageBoxTimeout = setTimeout(function() {\n            box.classList.remove('active');\n        }, 5000);\n    }\n\n    fill_shelf_with_folders(shelf, color, missing) {\n        const self = this,\n              may_be_missing = range(10),\n              missing_numbers = range(missing).map(function(i) {\n\n                  const missing_index = Math.floor(Math.random() * may_be_missing.length),\n                        missing_number = may_be_missing[missing_index];\n\n                  may_be_missing.splice(missing_index, 1);\n\n                  const left = may_be_missing.indexOf(missing_number-1);\n                  if(left > -1)\n                      may_be_missing.splice(left, 1);\n\n                  const right = may_be_missing.indexOf(missing_number+1);\n                  if(right > -1 && right < may_be_missing.length)\n                      may_be_missing.splice(right, 1);\n\n                  return missing_number;\n              });\n\n        return range(10).reduce(function(acc, i) {\n            if(missing_numbers.indexOf(i) > -1) {\n                const folder_space = create_element('div')\n                        .class('folder_space')\n                        .attr('data-type', color + i)\n                        .render();\n                shelf.appendChild(folder_space);\n                return acc.concat({\n                    'number': i,\n                    'color': color,\n                    'drop_target': folder_space\n                });\n            } else {\n                shelf.appendChild(self.create_folder(color, i));\n                return acc;\n            }\n        }, []);\n    }\n\n    create_draggable_folder(color, number, dropTarget) {\n        const missing = this.create_folder(color, number);\n        missing.classList.add('draggable_folder');\n        return missing;\n    }\n\n    create_folder(color, number) {\n        const offset = this.folder_sprite_offset(color, number);\n        return create_element('div')\n                .class('folder')\n                .attr('data-type', color + number)\n                .style('background-position', offset)\n                .render();\n    }\n\n    folder_sprite_offset(color, number) {\n        const colors = {\n                  'yellow': 0,\n                  'blue': 33.3,\n                  'green': 66.6,\n                  'red': 100\n              },\n              xOffset = number * 11.1,\n              yOffset = colors[color];\n\n        return `${xOffset}% ${yOffset}%`;\n    }\n\n    cleanup(scene) {\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class PapaScene extends Scene {\n\n    constructor(part) {\n        super();\n        this.part = part || 'in';\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('papa');\n\n        if(this.part == 'in') {\n            this.create_in_dialog();\n            this.set_background('01');\n        } else {\n            this.create_out_dialog();\n            this.set_background('03');\n        }\n\n        this.dialog.play();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"papa\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_in_dialog() {\n        this.dialog_init()\n            .let('finn')\n            .say('Hallo Papa!')\n            .wait(3000)\n\n            .let('papa')\n            .say('Hallo Finn, du kommst gerade richtig! Ich hab hier wieder '\n                    + 'ein paar Ordner, die einsortiert werden müssen. Das '\n                    + 'machst du doch so gerne, oder?')\n            .wait(9000)\n\n            .let('finn')\n            .say('Ja, das kann ich gut!')\n            .wait(3000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_out_dialog() {\n        this.dialog_init()\n            .let('finn')\n            .say('Jetzt ist alles wieder aufgeräumt!')\n            .wait(3000)\n\n            .let('papa')\n            .say('Danke Finn, das sieht super aus!')\n            .wait(3000)\n\n            .let('finn')\n            .say('Du Papa… Lucy ist schon wieder weg. Hast du eine Idee, '\n                    + 'wo sie sein könnte?')\n            .wait(5000)\n\n            .let('papa')\n            .say('Hm… Das letzte Mal, als wir Lucy suchen mussten, war sie '\n                    + 'drüben auf Karls Hühnerhof. Hast du dort schon gesucht?')\n            .wait(7000)\n\n            .let('finn')\n            .say('Das ist eine gute Idee, da war ich noch nicht.')\n            .wait(4000)\n\n            .let('papa')\n            .say('Dann lauf mal schnell hin, wir sehen uns heute Abend!')\n            .wait(4000)\n\n            .let('finn')\n            .say('Okay, tschüss!')\n            .wait(2000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    set_background(number) {\n        this.scene.style.setProperty('background-image',\n                                     `url(img/papa_scene_${number}.png)`);\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class PrefaceScene extends Scene {\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('preface');\n\n        this.create_dialog();\n        this.set_background('01');\n\n        this.dialog.play();\n    }\n\n    create_dialog() {\n        const self = this;\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"narrator\"));\n        this.dialog\n            .do(function() {})\n            .wait(1000)\n\n            .let('narrator')\n            .say('Hallo Finn, was ist denn los? Warum bist du so traurig?')\n            .wait(5000)\n\n            .let('finn')\n            .say('Ich finde meine Katze Lucy nicht mehr. '\n                    + 'Ich habe mit ihr im Garten gespielt. Dann bin ich kurz '\n                    + 'ins Haus gegangen, um etwas zu trinken zu holen und '\n                    + 'als ich wieder in den Garten kam, war sie weg.')\n            .wait(11000)\n\n            .let('narrator')\n            .say('Oh, das ist schade. Hast du sie denn schon gesucht?')\n            .wait(5000)\n\n            .let('finn')\n            .say('Nein, alleine schaffe ich das nicht.')\n            .wait(4000)\n\n            .let('narrator')\n            .say('Das ist kein Problem. Ich hätte hier jemanden, der dir '\n                    + 'sicher gerne hilft')\n            .wait(6000)\n\n            .let('finn')\n            .say('Wirklich? Würdest du mir bei der Suche helfen? '\n                    + 'Das wäre super! Ich hole nur kurz meine Tasche '\n                    + 'und dann können wir los!')\n            .wait(9000)\n\n            .do(function() { })\n            .wait(1500)\n\n            .let('finn')\n            .say('Am besten gehen wir zuerst zu meinem Freund Emil, '\n                    + 'vielleicht hat er sie gesehen.')\n            .wait(5000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    set_background(number) {\n        this.scene.style.setProperty('background-image',\n                                     `url(img/preface_scene_${number}.png)`);\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","export default class Scene {\n    render(scene) {\n    }\n    enable_story_mode(story) {\n        this.story = story;\n    }\n    cleanup(scene) {\n    }\n}\n","import {create_element} from '../utils';\n\nexport default class SceneManager {\n\n    constructor() {\n        this.scene_element = this.create_scene_element();\n        this.scenes = {};\n        this.current_scene = undefined;\n    }\n\n    create_scene_element() {\n        return create_element('div').class('scene').render();\n    }\n\n    clean_scene() {\n\n        if(this.current_scene && this.current_scene.cleanup) {\n            this.current_scene.cleanup(this.scene_element);\n        }\n\n        const new_scene = this.create_scene_element();\n        this.scene_element.parentNode.replaceChild(new_scene, this.scene_element);\n        this.scene_element = new_scene;\n    }\n\n    pushState(scene) {\n        if(!history.pushState) {\n            return;\n        }\n        let queryString = \"?\" + scene.constructor.name;\n        if(scene.part) {\n            queryString += \"/\" + scene.part;\n        }\n\n        history.pushState(null, \"Finns Zahlenabenteuer\", queryString);\n    }\n\n    navigate(scene) {\n        if(!scene || !scene.render || !scene.cleanup) {\n            throw `${scene} is not a scene`;\n        }\n\n        this.clean_scene();\n\n        scene.render(this.scene_element);\n\n        this.current_scene = scene;\n        this.pushState(scene);\n        window.scene = scene;\n    }\n\n    get_scene_element() {\n        return this.scene_element;\n    }\n}\n\nconst scene_manager = new SceneManager();\nwindow.navigate = scene_manager.navigate;\n\nmodule.exports = scene_manager;\n","import interact from 'interactjs';\nimport {range, to_array, shuffle, create_element} from '../utils';\nimport Scene from './Scene';\n\nexport default class ShopGameScene extends Scene {\n\n    render(scene) {\n\n        this.scene = scene;\n        scene.classList.add('shop_game');\n\n        scene.appendChild(this.create_message_box());\n        scene.appendChild(this.create_scale());\n\n        scene.appendChild(this.create_source());\n        scene.appendChild(this.create_finish_button());\n\n        this.shuffle_problems();\n        this.next_problem();\n\n        this.freeze = false;\n    }\n\n    shuffle_problems() {\n        const items = [\"apple\", \"milk\", \"butter\"];\n\n        this.problems = shuffle(range(2, 11)).map(function(i) {\n            return {\n                sum: i,\n                less: Math.floor(Math.random() * i),\n                item: items[Math.floor(Math.random() * items.length)]\n            }\n        });\n    }\n\n    next_problem(problem) {\n        if(this.problems.length > 0) {\n            if(this.problem) {\n                this.source.classList.remove('item_' + this.problem.item);\n                this.source.removeChild(this.source.firstChild);\n            }\n            this.problem = this.problems.pop();\n            this.source.classList.add('item_' + this.problem.item);\n            this.source.appendChild(this.create_item(this.problem.item));\n            this.reset_dishes(this.problem.sum, this.problem.less, this.problem.item);\n            return true;\n        } else {\n            this.problem = undefined;\n\n            if(this.story) {\n                this.finish_timeout = setTimeout(x => this.story.next(), 1000);\n            } else {\n                this.show_message(\"Sehr gut! Du hast alle Aufgaben gelöst!\");\n            }\n\n            return false;\n        }\n    }\n\n    create_message_box() {\n        const box = create_element('div')\n                .class('message_box')\n                .render();\n        this.message_box = box;\n        return box;\n    }\n\n    show_message(message) {\n        const box = this.message_box;\n        box.textContent = message;\n        box.classList.add('active');\n        clearTimeout(this.message_box_timeout);\n        this.message_box_timeout = setTimeout(function() {\n            box.classList.remove('active');\n        }, 3000);\n    }\n\n    check_finish() {\n        if(this.freeze) {\n            return;\n        }\n\n        const self = this,\n            {sum} = self.problem,\n            right_count = self.right_dish.childElementCount;\n\n        if(sum == right_count) {\n            self.freeze = true;\n            self.show_message(\"Richtig!\");\n            setTimeout(function() { \n                if(self.next_problem()) {\n                    self.freeze = false;\n                }\n            }, 3000);\n        } else {\n            self.show_message(\"Leider falsch. Schau nochmal genau hin!\");\n        }\n    }\n\n    create_scale() {\n        const self = this,\n            scale = create_element('div').class('scale');\n\n        self.left_dish = create_element('div')\n                .class('dish')\n                .class('dish_left')\n                .attr('data-dish', 'left')\n                .render();\n        self.right_dish = create_element('div')\n                .class('dish')\n                .class('dish_right')\n                .attr('data-dish', 'right')\n                .render();\n\n        interact(self.right_dish).dropzone({\n            ondragenter: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.add('drop-target');\n            },\n            ondragleave: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('drop-target');\n            },\n            ondropdeactivate: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('drop-target');\n            }\n        });\n\n        scale.adopt(create_element('div')\n                .class('lever')\n                .adopt(create_element('div')\n                        .class('needle')\n                        .render())\n                .render());\n        scale.adopt(create_element('div')\n                .class('pillar')\n                .render());\n        scale.adopt(self.left_dish);\n        scale.adopt(self.right_dish);\n\n        return scale.render();\n    }\n\n    reset_dishes(left_count, right_count, item_type) {\n        const self = this;\n\n        while(self.left_dish.firstChild) {\n            self.left_dish.removeChild(self.left_dish.firstChild);\n        }\n        while(self.right_dish.firstChild) {\n            self.right_dish.removeChild(self.right_dish.firstChild);\n        }\n\n        range(left_count).forEach(function(i) {\n            self.left_dish.appendChild(self.create_item(item_type, true));\n        });\n\n        range(right_count).forEach(function(i) {\n            self.right_dish.appendChild(self.create_item(item_type));\n        });\n    }\n\n    create_source() {\n        this.source = create_element('div')\n                    .class('source')\n                    .class('item')\n                    .attr('data-type', 'source')\n                    .render();\n        return this.source;\n    }\n\n    create_item(type, fixed) {\n        const self = this,\n            item = create_element('div')\n                .class('item')\n                .class('item_' + type)\n                .attr('data-type', type)\n                .render();\n\n        !fixed && interact(item).draggable({\n            onstart: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n            },\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const target = e.target,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const item = e.target,\n                      dish = e.interaction.dropElement,\n                      parent = item.parentNode;\n\n                if(dish == null || dish.childElementCount >= 10) {\n                    parent.removeChild(item);\n                } else {\n                    item.removeAttribute('data-x');\n                    item.removeAttribute('data-y');\n                    item.style.removeProperty('transform');\n\n                    dish.appendChild(item);\n                }\n\n                if(parent.getAttribute('data-type', 'source')) {\n                    const new_item = self.create_item(\n                            item.getAttribute('data-type'));\n                    self.source.appendChild(new_item);\n                }\n            }\n        }).styleCursor(false);\n\n        return item;\n    }\n\n    create_finish_button() {\n        return create_element('button')\n                    .class('finish_button')\n                    .text(\"Wiegen!\")\n                    .click(this.check_finish.bind(this))\n                    .render();\n    }\n\n    cleanup(scene) {\n        this.problem = undefined;\n    }\n}\n","import interact from 'interactjs';\nimport {range, to_array, shuffle, create_element} from '../utils';\nimport Scene from './Scene';\n\nexport default class TreehouseGameScene extends Scene {\n\n    render(scene) {\n\n        this.scene = scene;\n        scene.classList.add('treehouse_game');\n\n        scene.appendChild(this.create_message_box());\n        scene.appendChild(this.create_problem_field());\n        scene.appendChild(this.create_toolbox());\n\n        scene.appendChild(this.create_sink());\n        scene.appendChild(this.create_finish_button());\n\n        this.shuffle_problems();\n        this.next_problem();\n    }\n\n    shuffle_problems() {\n        this.problems = shuffle(range(2, 11));\n        console.log(this.problems);\n    }\n\n    next_problem(problem) {\n        if(this.problems.length > 0) {\n            this.problem = this.problems.pop();\n            this.problem_field.textContent = `Suche ${this.problem} Nägel`;\n            return true;\n        } else {\n            this.problem = undefined;\n            this.problem_field.textContent = \"\";\n\n            if(this.story) {\n                this.finish_timeout = setTimeout(x => this.story.next(), 1000);\n            } else {\n                this.show_message(\"Sehr gut! Du hast alle Aufgaben gelöst!\");\n            }\n\n            return false;\n        }\n    }\n\n    create_message_box() {\n        const box = create_element('div')\n                .class('message_box')\n                .render();\n        this.message_box = box;\n        return box;\n    }\n\n    show_message(message) {\n        const box = this.message_box;\n        box.textContent = message;\n        box.classList.add('active');\n        clearTimeout(this.message_box_timeout);\n        this.message_box_timeout = setTimeout(function() {\n            box.classList.remove('active');\n        }, 3000);\n    }\n\n    check_finish() {\n        const nail_count = this.sink.childElementCount;\n\n        if(this.freeze) {\n            return;\n        }\n\n        if(nail_count == this.problem) {\n            this.freeze = true;\n            this.show_message(\"Richtig!\");\n            setTimeout(x => { \n                this.clear_sink();\n                if(this.next_problem()) {\n                    this.freeze = false;\n                }\n            }, 3000);\n        } else {\n            this.show_message(\"Leider falsch. Schau nochmal genau hin!\");\n        }\n    }\n\n    create_problem_field() {\n        this.problem_field = create_element('div')\n                .class('problem_field')\n                .render();\n        return this.problem_field;\n    }\n\n    create_toolbox() {\n        const self = this,\n              box = create_element('div').class('toolbox').render();\n\n        interact(box).draggable({\n            onstart: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const nail = self.create_nail(),\n                    parentOffset = e.target.getBoundingClientRect();\n\n                e.interaction.nail = nail;\n                e.target.appendChild(nail);\n\n                const nailOffset = nail.getBoundingClientRect(),\n                    left = e.x0 - parentOffset.left - nailOffset.width / 2,\n                    top = e.y0 - parentOffset.top - nailOffset.height / 2;\n\n                nail.style.setProperty(\"left\", left + \"px\");\n                nail.style.setProperty(\"top\", top + \"px\");\n            },\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const target = e.interaction.nail,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const nail = e.interaction.nail,\n                      sink = e.interaction.dropElement;\n\n                if(sink == null) {\n                    nail.parentElement.removeChild(nail);\n                } else {\n                    const sinkOffset = sink.getBoundingClientRect(),\n                          nailOffset = nail.getBoundingClientRect(),\n                          minLeft = sinkOffset.width * 0.02,\n                          minTop = sinkOffset.height * 0.02,\n                          maxLeft = (sinkOffset.width - nailOffset.width) * 0.98,\n                          maxTop = (sinkOffset.height - nailOffset.height) * 0.98;\n\n                    let left = nailOffset.left - sinkOffset.left,\n                        top = nailOffset.top - sinkOffset.top;\n\n                    left = Math.max(minLeft, Math.min(left, maxLeft));\n                    top = Math.max(minTop, Math.min(top, maxTop));\n\n                    nail.removeAttribute('data-x');\n                    nail.removeAttribute('data-y');\n                    nail.style.removeProperty('transform');\n                    nail.style.setProperty('left', left + \"px\");\n                    nail.style.setProperty('top', top + \"px\");\n                    sink.appendChild(nail);\n                    self.make_nail_draggable(nail);\n                }\n            }\n        }).styleCursor(false);\n\n        return box;\n    }\n\n    create_nail() {\n        return create_element('div').class('nail').render();\n    }\n\n    make_nail_draggable(nail) {\n        interact(nail).draggable({\n            onstart: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.parentElement.appendChild(e.target);\n            },\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const target = e.target,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const nail = e.target,\n                      dropzone = e.interaction.dropElement;\n\n                if(dropzone != null && dropzone.getAttribute('data-type') == 'sink') {\n                    const sinkOffset = dropzone.getBoundingClientRect(),\n                          nailOffset = nail.getBoundingClientRect(),\n                          minLeft = sinkOffset.width * 0.02,\n                          minTop = sinkOffset.height * 0.02,\n                          maxLeft = (sinkOffset.width - nailOffset.width) * 0.98,\n                          maxTop = (sinkOffset.height - nailOffset.height) * 0.98;\n\n                    let left = nailOffset.left - sinkOffset.left,\n                        top = nailOffset.top - sinkOffset.top;\n\n                    left = Math.max(minLeft, Math.min(left, maxLeft));\n                    top = Math.max(minTop, Math.min(top, maxTop));\n\n                    nail.removeAttribute('data-x');\n                    nail.removeAttribute('data-y');\n                    nail.style.removeProperty('transform');\n                    nail.style.setProperty('left', left + \"px\");\n                    nail.style.setProperty('top', top + \"px\");\n                } else {\n                    nail.parentElement.removeChild(nail);\n                }\n            }\n        }).styleCursor(false);\n    }\n\n    create_sink() {\n        const sink = create_element('div')\n                    .class('sink')\n                    .attr('data-type', 'sink')\n                    .render();\n\n        this.sink = sink;\n\n        interact(sink).dropzone({});\n\n        return sink;\n    }\n\n    clear_sink() {\n        while(this.sink.firstChild) {\n            this.sink.removeChild(this.sink.firstChild);\n        }\n    }\n\n    create_finish_button() {\n        return create_element('button')\n                    .class('finish_button')\n                    .text(\"Fertig, zählen!\")\n                    .click(this.check_finish.bind(this))\n                    .render();\n    }\n\n    cleanup(scene) {\n        if(this.finish_timeout !== undefined) {\n            clearTimeout(this.finish_timeout);\n        }\n    }\n}\n","export function range(startOrEnd, end = null, step = 1) {\n\n    if(arguments.length < 1) {\n        end = 0;\n        startOrEnd = 0;\n    } else if(end === null) {\n        end = startOrEnd;\n        startOrEnd = 0;\n    }\n\n    var range = [];\n\n    while(startOrEnd != end) {\n        range.push(startOrEnd);\n        startOrEnd += step;\n    }\n    return range;\n}\n\nexport function shuffle(arr) {\n    const shuffled = [],\n          array = arr.slice(0);\n\n    let rand;\n\n    while(array.length > 0) {\n        rand = Math.floor(Math.random() * array.length);\n        shuffled.push(array.splice(rand, 1)[0]);\n    }\n\n    return shuffled;\n}\n\nclass DomElementDraft {\n    constructor(tag) {\n        this.el = document.createElement(tag);\n    }\n    class(clazz) {\n        this.el.classList.add(clazz);\n        return this;\n    }\n    id(id) {\n        this.el.setAttribute('id', id);\n        return this;\n    }\n    attr(name, value) {\n        this.el.setAttribute(name, value);\n        return this;\n    }\n    style(property, value) {\n        this.el.style.setProperty(property, value);\n        return this;\n    }\n    text(text) {\n        this.el.textContent = text;\n        return this;\n    }\n    adopt(child) {\n        this.el.appendChild(child);\n        return this;\n    }\n    click(func) {\n        this.el.addEventListener('click', func);\n        return this;\n    }\n    render() {\n        return this.el;\n    }\n}\n\nexport function create_element(tag) {\n    return new DomElementDraft(tag);\n}\n\nexport function to_array(array_like) {\n    return Array.prototype.slice.call(array_like);\n}\n\nexport function check_args() {\n    for(let i = 1; i < arguments.length; i++) {\n        if(arguments[i] != typeof(arguments[0][i-1])) {\n            return false;\n        }\n    }\n    return true;\n}\n"]}