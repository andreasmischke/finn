{"version":3,"sources":["app/App.js","app/Story.js","app/hud.js","app/initialize.js","app/scenes/BarnScene.js","app/scenes/Dialog.js","app/scenes/EggGameScene.js","app/scenes/EmilScene.js","app/scenes/EmmaScene.js","app/scenes/FinaleScene.js","app/scenes/KarlScene.js","app/scenes/MainMenuScene.js","app/scenes/OfficeGameScene.js","app/scenes/PapaScene.js","app/scenes/PrefaceScene.js","app/scenes/Scene.js","app/scenes/SceneManager.js","app/scenes/ShopGameScene.js","app/scenes/TreehouseGameScene.js","app/utils.js"],"names":["require","register","exports","module","_interopRequireDefault","obj","__esModule","default","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","_hud","_hud2","_utils","_SceneManager","_SceneManager2","_MainMenuScene","_MainMenuScene2","_PrefaceScene","_EmilScene","_TreehouseGameScene","_EmmaScene","_ShopGameScene","_PapaScene","_OfficeGameScene","_KarlScene","_EggGameScene","App","this","app_element","create_app_element","appendChild","get_scene_element","init","initialize_resize_listener","query","location","search","substr","split","scene","navigate","Function","bind","apply","concat","slice","e","initialize_keyboard_listener","console","log","value","create_element","render","document","body","resize_timeout_throttle","resize_timeout_id","window","addEventListener","resize_listener","event","_this","setTimeout","_","clearTimeout","resize_app","el","w","innerWidth","h","innerHeight","height","style","width","top","left","fontSize","getBoundingClientRect","keyCode","skip","fast_forward","app","_PrefaceScene2","_EmilScene2","_EmmaScene2","_TreehouseGameScene2","_ShopGameScene2","_PapaScene2","_OfficeGameScene2","_KarlScene2","_EggGameScene2","_BarnScene","_BarnScene2","_FinaleScene","_FinaleScene2","Story","scenes","current_scene","_len","arguments","args","_key","push","empty_bag","play","stop","rewind","scene_data","enable_story_mode","story","add","next","create_main_menu_button","attr","click","create_bag_box","adopt","create_bag","create_bag_button","flashlight","catfood","add_flashlight","classList","remove","add_catfood","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","create","constructor","setPrototypeOf","__proto__","_interactjs","_interactjs2","_Dialog","_Dialog2","_Scene2","_Scene3","BarnScene","_Scene","getPrototypeOf","create_image","create_cat_target","create_dialog","dialog1","_this2","add_bubble","wait","say","switch_on_flashlight","dialog2","x","create_light_handle","create_light","cat_target","light","light_handle","draggable","onmove","freeze","handle","parseFloat","getAttribute","dx","y","dy","transform","setAttribute","onend","t","radius","midx","midy","distanceX","Math","abs","distanceY","distanceXsq","pow","distanceYsq","distance","sqrt","styleCursor","Timeout","callable","delay","remaining_time","__run","target_time","Date","timeout","state","clearInterval","toString","toSource","Dialog","bubbles","items","current","undefined","draft","name","bubble","type","add_text","add_callable","process_draft","text","time","argc","check_args","error","speaker","enter","textContent","exit","warn","item","pause","resume","cancel","max","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","_i","Symbol","iterator","done","err","EggGameScene","create_message_box","create_egg_box","brown_source","create_egg_source","create_egg","white_source","shuffle_problems","next_problem","problems","shuffle","range","problem","summand1","pop","summand2","problem_field","finish_timeout","show_message","box","message_box","message","message_box_timeout","_self$problem","a","b","_self$dimples$reduce","dimples","reduce","acc","dimple","childElementCount","firstChild","white","brown","clear_dimples","create_problem_field","forEach","create_dimple","d","removeChild","dropzone","overlap","ondragenter","ondragleave","ondropdeactivate","color","source","egg","onstart","interaction","dropElement","parentNode","removeAttribute","removeProperty","to_array","childNodes","check_finish","EmilScene","part","create_in_dialog","set_background","create_out_dialog","dialog","hud","dialog_init","_this3","number","setProperty","EmmaScene","FinaleScene","KarlScene","_Story","_Story2","MainMenuScene","create_story_buttons","create_menu_buttons","section","start","game_section","create_menu_button","OfficeGameScene","colors","missing_folders","map","shelf","missing","fill_shelf_with_folders","messageBox","dragContainer","m","col","nr","drop_target","create_draggable_folder","showMessage","zIndex","folder","parentElement","ondrop","space","relatedTarget","foldersNodelist","querySelectorAll","folders","correct_count","folder_space","space_type","folder_type","messageBoxTimeout","may_be_missing","missing_numbers","missing_index","floor","random","missing_number","splice","indexOf","right","create_folder","dropTarget","offset","folder_sprite_offset","yellow","blue","green","red","xOffset","yOffset","filter","s","selector","matchingFolder","querySelector","PapaScene","PrefaceScene","Scene","SceneManager","scene_element","create_scene_element","cleanup","new_scene","replaceChild","history","pushState","queryString","clean_scene","scene_manager","ShopGameScene","create_scale","create_source","create_finish_button","sum","less","create_item","reset_dishes","right_count","right_dish","scale","left_dish","left_count","item_type","fixed","dish","parent","new_item","TreehouseGameScene","create_toolbox","create_sink","nail_count","sink","clear_sink","nail","create_nail","parentOffset","nailOffset","x0","y0","sinkOffset","minLeft","minTop","maxLeft","maxTop","min","make_nail_draggable","startOrEnd","end","step","shuffled","array","rand","tag","DomElementDraft","array_like","_typeof","createElement","clazz","_id","property","_text","child","func"],"mappings":"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","file":"docs/app.js.map","sourcesContent":["import hud from 'hud';\nimport {create_element} from 'utils';\nimport scene_manager from './scenes/SceneManager';\nimport MainMenuScene from './scenes/MainMenuScene';\nimport PrefaceScene from './scenes/PrefaceScene';\nimport EmilScene from './scenes/EmilScene';\nimport TreehouseGameScene from './scenes/TreehouseGameScene';\nimport EmmaScene from './scenes/EmmaScene';\nimport ShopGameScene from './scenes/ShopGameScene';\nimport PapaScene from './scenes/PapaScene';\nimport OfficeGameScene from './scenes/OfficeGameScene';\nimport KarlScene from './scenes/KarlScene';\nimport EggGameScene from './scenes/EggGameScene';\n\nclass App {\n\n    constructor() {\n        this.app_element = this.create_app_element();\n\n        this.app_element.appendChild(scene_manager.get_scene_element());\n        this.app_element.appendChild(hud.init());\n\n        this.initialize_resize_listener();\n\n        try {\n            const query = location.search.substr(1).split(\"/\");\n            const scene = require('./scenes/' + query[0]);\n            scene_manager.navigate(new scene.default(...query.slice(1)));\n        } catch(e) {\n            scene_manager.navigate(new MainMenuScene());\n        }\n\n        this.initialize_keyboard_listener();\n\n        console.log('initialized');\n    }\n\n    create_app_element() {\n        const app_element = create_element('div').class('app').render();\n        document.body.appendChild(app_element);\n        return app_element;\n    }\n\n    initialize_resize_listener() {\n        this.resize_timeout_throttle = false;\n        this.resize_timeout_id = null;\n        window.addEventListener('resize', this.resize_listener.bind(this));\n        this.resize_listener();\n    }\n\n    resize_listener(event) {\n\n        if(this.resize_timeout_throttle)\n            return;\n        this.resize_timeout_throttle = true;\n\n        setTimeout(_ => this.resize_timeout_throttle = false, 500);\n\n        clearTimeout(this.resize_timeout_id);\n        this.resize_timeout_id = setTimeout(this.resize_app.bind(this), 750);\n    }\n\n    resize_app() {\n        this.resize_timeout_id = null;\n        const el = this.app_element,\n              w = window.innerWidth,\n              h = window.innerHeight,\n              height = w / 16 * 9;\n\n        if(height < h) {\n            // max width\n            el.style.height = height + \"px\";\n            el.style.width = \"100%\";\n            el.style.top = (h - height) / 2 + \"px\";\n            el.style.left = \"\";\n        } else {\n            // max height\n            const width = h / 9 * 16;\n            el.style.height = \"100%\";\n            el.style.width = width + \"px\";\n            el.style.top = \"\";\n            el.style.left = (w - width) / 2 + \"px\";\n        }\n        el.style.fontSize = el.getBoundingClientRect()['height'] / 100 + \"px\";\n    }\n\n    initialize_keyboard_listener() {\n        document.addEventListener('keyup', function(e) {\n            if(e.keyCode == 96) {\n                window.skip && window.skip();\n            } else if(e.keyCode == 97) {\n                window.fast_forward && window.fast_forward();\n            }\n        });\n    }\n\n}\n\nconst app = new App();\nmodule.exports = app;\n","import scene_manager from './scenes/SceneManager';\nimport MainMenuScene from './scenes/MainMenuScene';\nimport PrefaceScene from './scenes/PrefaceScene';\nimport EmilScene from './scenes/EmilScene';\nimport EmmaScene from './scenes/EmmaScene';\nimport TreehouseGameScene from './scenes/TreehouseGameScene';\nimport ShopGameScene from './scenes/ShopGameScene';\nimport PapaScene from './scenes/PapaScene';\nimport OfficeGameScene from './scenes/OfficeGameScene';\nimport KarlScene from './scenes/KarlScene';\nimport EggGameScene from './scenes/EggGameScene';\nimport BarnScene from './scenes/BarnScene';\nimport FinaleScene from './scenes/FinaleScene';\n\nclass Story {\n    constructor() {\n        this.scenes = [];\n        this.current_scene = 0;\n    }\n\n    add(scene, ...args) {\n        this.scenes.push({scene: scene, args: args});\n        return this;\n    }\n\n    rewind() {\n        require('hud').empty_bag();\n        this.current_scene = 0;\n    }\n\n    next() {\n        this.current_scene = this.current_scene + 1;\n        if(this.current_scene < this.scenes.length) {\n            this.play();\n        } else {\n            this.stop();\n        }\n    }\n\n    stop() {\n        this.rewind();\n        scene_manager.navigate(new MainMenuScene());\n    }\n\n    start() {\n        this.rewind();\n        this.play();\n    }\n\n    play() {\n        if(this.current_scene >= this.scenes.length) {\n            return;\n        }\n        const scene_data = this.scenes[this.current_scene],\n              scene = new scene_data.scene(...scene_data.args);\n\n        scene.enable_story_mode(this);\n        scene_manager.navigate(scene);\n    }\n}\n\nconst story = new Story();\nstory.add(PrefaceScene)\n     .add(EmilScene, 'in')\n     .add(TreehouseGameScene)\n     .add(EmilScene, 'out')\n     .add(EmmaScene, 'in')\n     .add(ShopGameScene)\n     .add(EmmaScene, 'out')\n     .add(PapaScene, 'in')\n     .add(OfficeGameScene)\n     .add(PapaScene, 'out')\n     .add(KarlScene, 'in')\n     .add(EggGameScene)\n     .add(KarlScene, 'mid')\n     .add(BarnScene)\n     .add(FinaleScene);\n\nwindow.skip = story.next.bind(story);\n\nmodule.exports = story;\n","import {create_element} from 'utils';\nimport MainMenuScene from './scenes/MainMenuScene';\nimport scene_manager from './scenes/SceneManager';\n\nlet flashlight, catfood;\n\nfunction create_main_menu_button() {\n    return create_element('img')\n            .attr('src', 'img/home_button.png')\n            .class('hud_mainmenu')\n            .click(e => scene_manager.navigate(new MainMenuScene()))\n            .render();\n};\nfunction create_bag_box() {\n    return create_element('div')\n            .class('hud_bag_box')\n            .adopt(create_bag())\n            .adopt(create_bag_button())\n            .render();\n};\nfunction create_bag() {\n    flashlight = create_element('img')\n            .attr('src', 'img/flashlight.png')\n            .class('bag_item')\n            .class('bag_item_hidden')\n            .render();\n\n    catfood = create_element('img')\n            .attr('src', 'img/catfood.png')\n            .class('bag_item')\n            .class('bag_item_hidden')\n            .render();\n\n    return create_element('div')\n            .class('hud_bag')\n            .adopt(flashlight)\n            .adopt(catfood)\n            .render();\n};\nfunction create_bag_button() {\n    return create_element('img')\n            .attr('src', 'img/bag_button.png')\n            .class('hud_bag_button')\n            .render();\n};\nfunction init() {\n    return create_element('div')\n            .class('hud')\n            .adopt(create_main_menu_button())\n            .adopt(create_bag_box())\n            .render();\n};\n\nfunction add_flashlight() {\n    flashlight.classList.remove('bag_item_hidden');\n}\nfunction add_catfood() {\n    catfood.classList.remove('bag_item_hidden');\n}\n\nfunction empty_bag() {\n    flashlight.classList.add('bag_item_hidden');\n    catfood.classList.add('bag_item_hidden');\n}\n\nmodule.exports = {\n    init: init,\n    add_flashlight: add_flashlight,\n    add_catfood: add_catfood,\n    empty_bag: empty_bag\n};\n\n","document.addEventListener('DOMContentLoaded', () => {\n    require('App');\n});\n","import {create_element} from '../utils';\nimport interact from 'interactjs';\nimport Dialog from './Dialog';\nimport Scene from './Scene';\n\nexport default class BarnScene extends Scene {\n\n    render(scene) {\n        this.scene = scene;\n\n        scene.classList.add('barn');\n\n        scene.appendChild(this.create_image());\n        scene.appendChild(this.create_cat_target());\n\n        this.create_dialog();\n\n        this.dialog1.play();\n    }\n\n    create_dialog() {\n        this.dialog1 = new Dialog();\n        this.scene.appendChild(this.dialog1.add_bubble(\"finn1\"));\n        this.dialog1\n            .do(function() {})\n            .wait(1000)\n\n            .let('finn1')\n            .say('Oh, hier ist es aber ganz schön dunkel. Zum Glück hat '\n                    + 'mir Emil die Taschenlampe geliehen.')\n            .wait(6000)\n\n            .do(this.switch_on_flashlight.bind(this))\n            .wait(500)\n\n            .let('finn1')\n            .say('Schon besser. Mal sehen, ob wir Lucy jetzt finden können')\n            .wait(3000);\n\n        this.dialog2 = new Dialog();\n        this.scene.appendChild(this.dialog2.add_bubble(\"finn2\"));\n        this.dialog2\n            .let('finn2')\n            .say('Da ist sie! Komm Lucy, komm raus, aus deinem Versteck!')\n            .wait(4000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    switch_on_flashlight() {\n        this.scene.appendChild(this.create_light_handle());\n        this.scene.appendChild(this.create_light());\n    }\n\n    create_cat_target() {\n        this.cat_target = create_element('div')\n            .class('cat_target')\n            .render();\n        return this.cat_target;\n    }\n    create_image() {\n        return create_element('div')\n            .class('image')\n            .render();\n    }\n\n    create_light() {\n        this.light = create_element('div')\n            .class('light')\n            .render();\n        return this.light;\n    }\n\n    create_light_handle() {\n        const light_handle = create_element('div')\n            .class('light_handle')\n            .render(),\n              self = this;\n\n        interact(light_handle).draggable({\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const light = self.light,\n                      handle = light_handle,\n                      x = (parseFloat(handle.getAttribute(\"data-x\")) || 0) + e.dx,\n                      y = (parseFloat(handle.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                light.style.transform = `translate(${x}px, ${y}px)`;\n                handle.style.transform = `translate(${x}px, ${y}px)`;\n                handle.setAttribute('data-x', x);\n                handle.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const handle = e.target,\n                      t = self.cat_target.getBoundingClientRect(),\n                      h = handle.getBoundingClientRect(),\n                      radius = h.width/2,\n                      midx = radius + h.left,\n                      midy = radius + h.top,\n                      distanceX = Math.abs(midx - t.left),\n                      distanceY = Math.abs(midy - t.top),\n                      distanceXsq = Math.pow(distanceX, 2),\n                      distanceYsq = Math.pow(distanceY, 2),\n                      distance = Math.sqrt(distanceXsq + distanceYsq);\n\n                if(distance < radius * 0.8) {\n                    self.freeze = true;\n                    self.dialog2.play();\n                }\n            }\n        }).styleCursor(false);\n\n        return light_handle;\n    }\n\n    cleanup(scene) {\n        this.dialog1 && this.dialog1.stop();\n        this.dialog2 && this.dialog2.stop();\n    }\n}\n","import {check_args, create_element} from \"../utils\";\n\nclass Timeout {\n    constructor(callable, delay) {\n        this.remaining_time = delay;\n        this.callable = callable;\n        this.__run(delay);\n    }\n\n    __run(delay) {\n        const self = this;\n        self.target_time = delay + (+new Date());\n        self.timeout = setTimeout(function() {\n            self.state = 'completed';\n            self.remaining_time = 0;\n            self.callable();\n        }, delay);\n        self.state = 'running';\n    }\n\n    pause() {\n        clearInterval(this.timeout);\n        if(this.state == 'running') {\n            this.remaining_time = this.target_time - (+new Date());\n            if(this.remaining_time < 1) {\n                this.state = 'cancelled';\n            } else {\n                this.state = 'paused';\n            }\n        }\n    }\n\n    resume() {\n        if(this.state == 'paused') {\n            this.__run(this.remaining_time);\n        }\n    }\n\n    cancel() {\n        clearInterval(this.timeout);\n        if(this.state !== 'completed') {\n            this.state = 'cancelled';\n            this.remaining_time = 0;\n        }\n    }\n\n    toString() {\n        return `Timeout ${this.state}; ${this.remaining_time} remaining`;\n    }\n\n    toSource() {\n        return `${this.toString()}; ${this.callable.toSource()}`;\n    }\n}\n\nexport default class Dialog {\n\n    constructor() {\n        this.bubbles = {};\n        this.items = [];\n        this.current = 0;\n        this.timeout = undefined;\n        this.draft = undefined;\n    }\n\n    add_bubble(name) {\n        const bubble = create_element(\"div\")\n                .class('dialog_bubble')\n                .class('dialog_bubble_' + name)\n                .click(this.next.bind(this))\n                .render();\n        this.bubbles[name] = bubble;\n        return bubble;\n    }\n\n    process_draft() {\n        if(this.draft != undefined) {\n            if(this.draft.type == 'text') {\n                this.add_text.apply(this, this.draft.args);\n            } else {\n                this.add_callable.apply(this, this.draft.args);\n            }\n            this.draft = undefined;\n        }\n    }\n\n    let(name) {\n        this.process_draft();\n        this.draft = {type: 'text', args: [name, '', 0]};\n        return this;\n    }\n\n    say(text) {\n        if(this.draft == undefined) {\n            throw \"Who shall say that?! Give me a name via let() first\";\n        }\n        if(this.draft.type != 'text') {\n            throw \"A function cannot say anything\";\n        }\n        this.draft.args[1] = text;\n        return this;\n    }\n\n    do(callable) {\n        this.process_draft();\n        this.draft = {type: 'func', args: [callable, null, 0]};\n        return this;\n    }\n\n    wait(time) {\n        if(this.draft == undefined) {\n            throw \"Nothing to do for that amount of time\";\n        }\n        this.draft.args[2] = time;\n        return this;\n    }\n\n    then(callable) {\n        if(this.draft == undefined) {\n            throw \"No draft to append this exit function to\";\n        }\n        if(this.draft.type != 'func') {\n            throw \"Cannot append exit function to text item\";\n        }\n        this.draft.args[1] = callable;\n        return this;\n    }\n\n    add() {\n        const argc = arguments.length;\n\n        if(argc == 2 && check_args(arguments, \"function\", \"number\")) {\n            this.add_callable.call(this, arguments[0], null, arguments[1]);\n        } else if(argc == 3 && check_args(arguments, \"function\", \"function\", \"number\")) {\n            this.add_callable.apply(this, arguments);\n        } else if(argc == 3 && check_args(arguments, \"string\", \"string\", \"number\")) {\n            this.add_text.apply(this, arguments);\n        } else {\n            console.error('Cannot identify parameters', arguments);\n        }\n        return this;\n    }\n\n    add_text(speaker, text, time) {\n        if(speaker in this.bubbles) {\n            const bubble = this.bubbles[speaker],\n                  enter = function() {\n                      bubble.classList.add('dialog_bubble_visible');\n                      bubble.textContent = text;\n                  },\n                  exit = function() {\n                      bubble.classList.remove('dialog_bubble_visible');\n                      bubble.textContent = '';\n                  };\n            this.add_callable(enter, exit, time);\n        } else {\n            console.warn(`cannot add text, since speaker ${speaker} has no bubble`);\n        }\n    }\n\n    create_speaker_function(bubble, text) {\n        return function() {\n            bubble.textContent = text;\n        }\n    }\n\n    add_callable(enter, exit, time) {\n        this.items.push({callable: enter, time: time});\n        if(exit !== null) {\n            this.items.push({callable: exit, time: 0});\n        }\n    }\n\n    play() {\n        this.process_draft();\n        const item = this.items[this.current];\n        if(item !== undefined) {\n            item.callable();\n            this.timeout = new Timeout(this.play.bind(this), item.time);\n            this.current = this.current + 1;\n        }\n        return this;\n    }\n\n    pause() {\n        this.timeout && this.timeout.pause();\n        return this;\n    }\n\n    resume() {\n        this.timeout && this.timeout.resume();\n        return this;\n    }\n\n    rewind() {\n        const state = this.timeout.state || 'cancelled';\n        this.timeout && this.timeout.cancel();\n        this.current = 0;\n        if(state == 'playing') {\n            this.play();\n        }\n        return this;\n    }\n\n    prev() {\n        this.current = Math.max(0, this.current - 2);\n        return this;\n    }\n\n    next() {\n        this.timeout && this.timeout.cancel();\n        this.play();\n        return this;\n    }\n\n    stop() {\n        this.timeout && this.timeout.cancel();\n        return this;\n    }\n}\n","import interact from 'interactjs';\nimport {range, to_array, shuffle, create_element} from '../utils';\nimport Scene from './Scene';\n\nexport default class EggGameScene extends Scene {\n\n    render(scene) {\n\n        scene.classList.add('egg_game');\n        scene.appendChild(this.create_message_box());\n\n        scene.appendChild(this.create_egg_box());\n\n        const brown_source = this.create_egg_source('brown');\n        this.create_egg(brown_source);\n        scene.appendChild(brown_source);\n\n        const white_source = this.create_egg_source('white');\n        this.create_egg(white_source);\n        scene.appendChild(white_source);\n\n        this.shuffle_problems();\n        this.next_problem();\n\n    }\n\n    shuffle_problems() {\n        this.problems = shuffle(range(7));\n    }\n\n    next_problem(problem) {\n        if(this.problems.length > 0) {\n            const summand1 = this.problems.pop(),\n                  summand2 = 6 - summand1;\n            this.problem = [summand1, summand2];\n            this.problem_field.textContent = `${summand1} + ${summand2} = 6`;\n            return true;\n        } else {\n            this.problem = undefined;\n            this.problem_field.textContent = \"\";\n\n            if(this.story) {\n                this.finish_timeout = setTimeout(x => this.story.next(), 1000);\n            } else {\n                this.show_message(\"Sehr gut! Du hast alle Aufgaben gelöst!\");\n            }\n\n            return false;\n        }\n    }\n\n    create_message_box() {\n        const box = create_element('div')\n                .class('message_box')\n                .render();\n        this.message_box = box;\n        return box;\n    }\n    show_message(message) {\n        const box = this.message_box;\n        box.textContent = message;\n        box.classList.add('active');\n        clearTimeout(this.message_box_timeout);\n        this.message_box_timeout = setTimeout(function() {\n            box.classList.remove('active');\n        }, 3000);\n    }\n\n    check_finish() {\n        const self = this,\n              [a, b] = self.problem,\n              {brown, white} = self.dimples.reduce(function(acc, dimple) {\n                  if(dimple.childElementCount > 0) {\n                      acc[dimple.firstChild.getAttribute('data-color')] += 1;\n                  }\n                  return acc;\n              }, {white: 0, brown: 0});\n\n        if(brown + white >= 6) {\n            if(a == brown && b == white || a == white && b == brown) {\n                self.freeze = true;\n                self.show_message(\"Richtig!\");\n                setTimeout(function() { \n                    self.clear_dimples();\n                    if(self.next_problem()) {\n                        self.freeze = false;\n                    }\n                }, 3000);\n            } else {\n                self.show_message(\"Leider falsch. Schau nochmal genau hin!\");\n            }\n        }\n    }\n\n    create_egg_box() {\n        const self = this,\n              box = create_element('div')\n                .class('egg_box')\n                .adopt(this.create_problem_field());\n\n        this.dimples = [];\n        range(6).forEach(function(i) {\n            const dimple = self.create_dimple(i);\n            box.adopt(dimple);\n            self.dimples.push(dimple);\n        });\n\n        return box.render();\n    }\n\n    clear_dimples() {\n        this.dimples.forEach(d => d.removeChild(d.firstChild));\n    }\n\n    create_problem_field() {\n        this.problem_field = create_element('div')\n                .class('problem_field')\n                .render();\n        return this.problem_field;\n    }\n\n    create_dimple(i) {\n        const self = this,\n              dimple = create_element('div')\n                .class('egg_dimple')\n                .class('egg_dimple_' + i)\n                .render();\n\n        interact(dimple).dropzone({\n            overlap: 0.25,\n            ondragenter: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.add('drop-target');\n            },\n            ondragleave: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('drop-target');\n            },\n            ondropdeactivate: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('drop-target');\n            }\n        });\n        return dimple;\n    }\n\n    create_egg_source(color) {\n        return create_element('div')\n                .class('egg_source')\n                .class('egg_source_' + color)\n                .class('egg')\n                .class(color + '_egg')\n                .attr('data-color', color)\n                .render()\n    }\n\n    create_egg(source) {\n        const self = this,\n              color = source.getAttribute('data-color'),\n              egg = create_element('div')\n                .class('egg')\n                .class('egg_draggable')\n                .class(color + '_egg')\n                .attr('data-color', color)\n                .render();\n\n        interact(egg).draggable({\n            onstart: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('egg_in_box');\n            },\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const target = e.target,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const egg = e.target,\n                      dimple = e.interaction.dropElement;\n\n                if(dimple == null) {\n                    egg.parentNode.removeChild(egg);\n                } else {\n                    egg.removeAttribute('data-x');\n                    egg.removeAttribute('data-y');\n                    egg.style.removeProperty('transform');\n                    egg.classList.add('egg_in_box')\n\n                    to_array(dimple.childNodes).forEach(function(egg) {\n                        dimple.removeChild(egg);\n                    });\n                    dimple.appendChild(egg);\n                }\n\n                self.create_egg(source);\n                self.check_finish();\n            }\n        }).styleCursor(false);\n\n        source.appendChild(egg);\n    }\n\n    cleanup(scene) {\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class EmilScene extends Scene {\n\n    constructor(part) {\n        super();\n        this.part = part || 'in';\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('emil');\n\n        if(this.part == 'in') {\n            this.create_in_dialog();\n            this.set_background('01');\n        } else {\n            this.create_out_dialog();\n            this.set_background('03');\n        }\n\n        this.dialog.play();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"emil\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_in_dialog() {\n        const hud = require('../hud');\n        this.dialog_init()\n            .do(function() {})\n            .wait(1000)\n\n            .let(\"finn\")\n            .say(\"Hallo Emil! Was machst du da?\")\n            .wait(3000)\n\n            .let(\"emil\")\n            .say(\"Hallo Finn! Ich baue mir ein Baumhaus. Der Boden ist schon fertig!\")\n            .wait(4000)\n\n            .let(\"finn\")\n            .say(\"Wow, das sieht schon gut aus! Sag mal, hast du Lucy gesehen?\")\n            .wait(4000)\n\n            .let(\"emil\")\n            .say(\"Nein, heute noch nicht. Ist sie denn weg?\")\n            .wait(3000)\n\n            .let(\"finn\")\n            .say(\"Ja, ich war vorhin mit ihr im Garten und während ich kurz im Haus war, ist sie verschwunden.\")\n            .wait(5000)\n\n            .let(\"emil\")\n            .say(\"Oh nein, hoffentlich findest du sie bald wieder. In meinem Werkzeugkoffer ist eine \"\n                     + \"Taschenlampe. Ich leihe sie dir gerne aus, dann kannst du Lucy auch finden, wenn sie \"\n                     + \"sich irgendwo versteckt hat.\")\n            .wait(10000)\n\n            .do(this.set_background.bind(this, '02'))\n            .wait(100)\n\n            .do(hud.add_flashlight.bind(hud))\n            .wait(900)\n\n            .let(\"finn\")\n            .say(\"Vielen Dank, ich werde gut darauf aufpassen!\")\n            .wait(3000)\n\n            .let(\"emil\")\n            .say(\"Finn, kannst du mir kurz helfen? Ich muss \"\n                     + \"diese Bretter festnageln, aber die Nägel sind \"\n                     + \"in meinem Werkzeugkoffer. Kannst du sie \"\n                     + \"mir geben?\")\n            .wait(7000)\n\n            .let(\"finn\")\n            .say(\"Klar, ich helfe dir gerne! Wieviele Nägel \"\n                     + \"brauchst du?\")\n            .wait(4000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_out_dialog() {\n        this.dialog_init()\n            .let(\"emil\")\n            .say(\"Super, vielen Dank! Du warst mir eine große Hilfe!\")\n            .wait(3500)\n\n            .let(\"finn\")\n            .say(\"Gern geschehen! Ich muss jetzt weiter, damit \"\n                         + \"ich Lucy bald wieder finde!\")\n            .wait(4000)\n\n            .let(\"emil\")\n            .say(\"Okay, viel Glück!\")\n            .wait(2500)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    set_background(number) {\n        this.scene.style.setProperty('background-image', \n                                     `url(img/emil_scene_${number}.png)`);\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class EmmaScene extends Scene {\n\n    constructor(part) {\n        super();\n        this.part = part || 'in';\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('emma');\n\n        if(this.part == 'in') {\n            this.create_in_dialog();\n        } else {\n            this.create_out_dialog();\n        }\n\n        this.dialog.play();\n        this.dialog.stop();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"emma\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_in_dialog() {\n        this.dialog_init()\n            .let('emma')\n            .say('Hallo Finn! Das ist aber schön, dass du vorbeischaust! '\n                    + 'Möchtest du mir beim Wiegen helfen?')\n            .wait(6000)\n\n            .let('finn')\n            .say('Oh ja, das mach ich gerne!')\n            .wait(3000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_out_dialog() {\n        const hud = require('../hud');\n        this.dialog_init()\n            .let('emma')\n            .say('Vielen Dank, Finn! Das hast du super gemacht!')\n            .wait(3000)\n\n            .let('finn')\n            .say('Danke, es hat mir viel Spaß gemacht! Jetzt muss ich aber weiter. '\n                    + 'Ich bin auf der Suche nach Lucy, sie ist mir weggelaufen.')\n            .wait(8000)\n\n            .let('emma')\n            .say('Hier, ich gebe dir noch ein paar Katzenleckerlis mit, '\n                    + 'dann kannst du Lucy aus ihrem Versteck locken. '\n                    + 'Viel Glück bei deiner Suche!')\n            .wait(8000)\n\n            .do(hud.add_catfood.bind(hud))\n            .wait(1000)\n\n            .let('finn')\n            .say('Danke!')\n            .wait(2000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class FinaleScene extends Scene {\n\n    constructor(part) {\n        super();\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('finale');\n\n        this.create_dialog();\n\n        this.dialog.play();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_dialog() {\n        this.dialog_init()\n            .let('finn')\n            .say('Danke, dass du mir geholfen hast! Gemeinsam haben wir Lucy '\n                    + 'wiedergefunden!')\n            .wait(6000)\n\n            .let('finn')\n            .say('Wenn du Lust hast, komm mich wieder besuchen und wir '\n                    + 'können wieder Emma im Laden helfen oder Papas Ordner '\n                    + 'einsortieren!')\n            .wait(9000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class KarlScene extends Scene {\n\n    constructor(part) {\n        super();\n        this.part = part || 'in';\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('karl');\n\n        if(this.part == 'in') {\n            this.create_in_dialog();\n        } else {\n            this.create_out_dialog();\n        }\n\n        this.dialog.play();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"karl\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_in_dialog() {\n        this.dialog_init()\n            .let('karl')\n            .say('Hallo Finn! Na, magst du mir wieder beim Eier einpacken '\n                    + 'helfen?')\n            .wait(6000)\n\n            .let('finn')\n            .say('Hallo Karl! Sehr gerne!')\n            .wait(3000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_out_dialog() {\n        this.dialog_init()\n            .let('karl')\n            .say('Gute Arbeit, Finn! Dann kann ich morgen früh direkt auf den '\n                    + 'Markt fahren und die Eier verkaufen!')\n            .wait(6000)\n\n            .let('finn')\n            .say('Danke, das hab ich gern gemacht! Sag mal Karl, hast du '\n                    + 'vielleicht Lucy gesehen?')\n            .wait(5000)\n\n            .let('karl')\n            .say('Lass mal überlegen…')\n            .wait(3000)\n\n            .let('karl')\n            .say('Nein, aber ich war auch den ganzen Tag mit dem Traktor '\n                    + 'auf dem Feld. Aber sieh doch mal in der Scheune nach. '\n                    + 'Da war sie ja schon öfters.')\n            .wait(7500)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport story from 'Story';\nimport scene_manager from './SceneManager';\nimport PrefaceScene from './PrefaceScene';\nimport EmilScene from './EmilScene';\nimport EmmaScene from './EmmaScene';\nimport TreehouseGameScene from './TreehouseGameScene';\nimport ShopGameScene from './ShopGameScene';\nimport PapaScene from './PapaScene';\nimport OfficeGameScene from './OfficeGameScene';\nimport KarlScene from './KarlScene';\nimport EggGameScene from './EggGameScene';\n\nexport default class MainMenuScene extends Scene {\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('main_menu');\n\n        this.create_story_buttons();\n        this.create_menu_buttons();\n\n        /*\n        this.create_menu_button('Eingangsszene', PrefaceScene);\n        this.create_menu_button('Bei Emil - Teil 1', EmilScene, 'in');\n        this.create_menu_button('Bei Emil - Teil 2', EmilScene, 'out');\n        this.create_menu_button('Bei Emma - Teil 1', EmmaScene, 'in');\n        this.create_menu_button('Bei Emma - Teil 2', EmmaScene, 'out');\n        this.create_menu_button('Bei Papa - Teil 1', PapaScene, 'in');\n        this.create_menu_button('Bei Papa - Teil 2', PapaScene, 'out');\n        this.create_menu_button('Bei Karl - Teil 1', KarlScene, 'in');\n        this.create_menu_button('Bei Karl - Teil 2', KarlScene, 'mid');\n        this.create_button_placeholder('In der Scheune');\n        this.create_menu_button('Bei Karl - Teil 3', KarlScene, 'out');\n        */\n    }\n\n    create_story_buttons() {\n        const section = create_element('div')\n            .class('section');\n\n        section.adopt(create_element('div')\n            .class('heading')\n            .class('heading_story')\n            .text(\"Geschichte spielen\")\n            .render());\n\n        section.adopt(create_element('div')\n            .class('btn')\n            .class('btn_play_story')\n            .click(e => story.start())\n            .text(\"Von vorne starten\")\n            .render());\n\n        section.adopt(create_element('div')\n            .class('btn')\n            .class('btn_resume_story')\n            .click(e => story.play())\n            .text(\"Weiterspielen\")\n            .render());\n\n        this.scene.appendChild(section.render());\n    }\n\n    create_menu_buttons() {\n        const section = create_element('div')\n            .class('section');\n\n        this.game_section = section.render();\n\n        section.adopt(create_element('div')\n            .class('heading')\n            .class('heading_games')\n            .text(\"Einzelspiele spielen\")\n            .render());\n\n        this.create_menu_button('Nägel zählen', TreehouseGameScene);\n        this.create_menu_button('Artikel wiegen', ShopGameScene);\n        this.create_menu_button('Ordner sortieren', OfficeGameScene);\n        this.create_menu_button('Eier einpacken', EggGameScene);\n\n        this.scene.appendChild(section.render());\n    }\n\n    create_button_placeholder(text) {\n        this.scene.appendChild(create_element('div')\n            .class('btn')\n            .class('button_placeholder')\n            .text(text)\n            .render());\n    }\n\n    create_menu_button(text, target, ...args) {\n        this.game_section.appendChild(create_element('div')\n            .class('btn')\n            .click(e => scene_manager.navigate(new target(...args)))\n            .text(text)\n            .render());\n    }\n\n    cleanup(scene) {\n    }\n}\n","import interact from 'interactjs';\nimport {create_element} from '../utils';\nimport {range, shuffle, to_array} from '../utils';\nimport Scene from './Scene';\n\nexport default class OfficeGameScene extends Scene {\n\n    render(scene) {\n        var self = this;\n\n        scene.classList.add('office_game');\n\n        const colors = ['blue', 'green', 'red'];\n        let missing_folders = [];\n        range(4).map(function(i) {\n            const shelf = create_element('div')\n                    .class('shelf')\n                    .class('shelf' + i)\n                    .render();\n            if(i < 3) {\n                const missing = self.fill_shelf_with_folders(shelf, colors[i], 3);\n                missing_folders = missing_folders.concat(missing);\n            } else {\n                self.fill_shelf_with_folders(shelf, 'yellow', 0);\n            }\n            scene.appendChild(shelf);\n            return shelf;\n        });\n\n        self.messageBox = create_element('div').class('message_box').render();\n        scene.appendChild(self.messageBox);\n\n        self.dragContainer = create_element('div')\n                .class('drag_container')\n                .render();\n\n        shuffle(missing_folders).forEach(function(m) {\n            const { color: col, number: nr, drop_target: target } = m,\n                  missing = self.create_draggable_folder(col, nr, target);\n            self.dragContainer.appendChild(missing);\n        });\n\n        scene.appendChild(create_element('div')\n                .class('drag_shadow')\n                .adopt(self.dragContainer)\n                .render());\n\n        self.showMessage(\"Sortiere die Ordner nach Farbe und Nummer ins Regal!\");\n\n        interact('.draggable_folder').draggable({\n            onstart: function(e) {\n                e.target.style.zIndex = 1;\n            },\n            onmove: function(e) {\n                const target = e.target,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                e.target.style.zIndex = '';\n                if(e.interaction.dropElement == null) {\n                    const folder = e.target;\n                    folder.removeAttribute('data-x');\n                    folder.removeAttribute('data-y');\n                    folder.style.transform = '';\n                    if(folder.parentElement != self.dragContainer) {\n                        self.dragContainer.appendChild(folder);\n                    }\n                }\n                self.check_finish();\n            }\n        }).styleCursor(false);\n        interact('.folder_space').dropzone({\n            overlap: 0.5,\n            ondragenter: function(e) {\n                e.target.classList.add('drop-target');\n            },\n            ondragleave: function(e) {\n                e.target.classList.remove('drop-target');\n            },\n            ondrop: function(e) {\n                const space = e.target,\n                      folder = e.relatedTarget;\n\n                folder.style.transform = '';\n\n                if(space.childElementCount > 0) {\n                    to_array(space.childNodes).forEach(function(folder) {\n                        self.dragContainer.appendChild(folder);\n                    });\n                }\n                space.appendChild(folder);\n            },\n            ondropdeactivate: function(e) {\n                const folder = e.relatedTarget;\n                folder.removeAttribute('data-x');\n                folder.removeAttribute('data-y');\n                folder.style.transform = 0;\n                e.target.classList.remove('drop-target');\n            }\n        });\n\n        window.fast_forward = this.fast_forward;\n    }\n\n    check_finish() {\n        if(this.dragContainer.childElementCount == 0) {\n            const foldersNodelist = document.querySelectorAll('.draggable_folder'),\n                  folders = to_array(foldersNodelist),\n                  correct_count = folders.reduce(function(acc, folder) {\n                      const folder_space = folder.parentElement,\n                            space_type = folder_space.getAttribute('data-type'),\n                            folder_type = folder.getAttribute('data-type');\n                      if(space_type == folder_type) {\n                          return acc + 1;\n                      } else {\n                          return acc;\n                      }\n                  }, 0);\n\n            if(correct_count == 9) {\n                if(this.story) {\n                    this.showMessage(\"Sehr gut!!\");\n                    this.finish_timeout = setTimeout(x => this.story.next(), 3000);\n                } else {\n                    this.showMessage(\"Sehr gut! Du hast alle Aufgaben gelöst!\");\n                }\n            } else {\n                this.showMessage(\"Leider falsch. Schau nochmal genau hin!\");\n            }\n        }\n    }\n\n    showMessage(message) {\n        const box = this.messageBox;\n        box.textContent = message;\n        box.classList.add('active');\n        clearTimeout(this.messageBoxTimeout);\n        this.messageBoxTimeout = setTimeout(function() {\n            box.classList.remove('active');\n        }, 5000);\n    }\n\n    fill_shelf_with_folders(shelf, color, missing) {\n        const self = this,\n              may_be_missing = range(10),\n              missing_numbers = range(missing).map(function(i) {\n\n                  const missing_index = Math.floor(Math.random() * may_be_missing.length),\n                        missing_number = may_be_missing[missing_index];\n\n                  may_be_missing.splice(missing_index, 1);\n\n                  const left = may_be_missing.indexOf(missing_number-1);\n                  if(left > -1)\n                      may_be_missing.splice(left, 1);\n\n                  const right = may_be_missing.indexOf(missing_number+1);\n                  if(right > -1 && right < may_be_missing.length)\n                      may_be_missing.splice(right, 1);\n\n                  return missing_number;\n              });\n\n        return range(10).reduce(function(acc, i) {\n            if(missing_numbers.indexOf(i) > -1) {\n                const folder_space = create_element('div')\n                        .class('folder_space')\n                        .attr('data-type', color + i)\n                        .render();\n                shelf.appendChild(folder_space);\n                return acc.concat({\n                    'number': i,\n                    'color': color,\n                    'drop_target': folder_space\n                });\n            } else {\n                shelf.appendChild(self.create_folder(color, i));\n                return acc;\n            }\n        }, []);\n    }\n\n    create_draggable_folder(color, number, dropTarget) {\n        const missing = this.create_folder(color, number);\n        missing.classList.add('draggable_folder');\n        return missing;\n    }\n\n    create_folder(color, number) {\n        const offset = this.folder_sprite_offset(color, number);\n        return create_element('div')\n                .class('folder')\n                .attr('data-type', color + number)\n                .style('background-position', offset)\n                .render();\n    }\n\n    folder_sprite_offset(color, number) {\n        const colors = {\n                  'yellow': 0,\n                  'blue': 33.3,\n                  'green': 66.6,\n                  'red': 100\n              },\n              xOffset = number * 11.1,\n              yOffset = colors[color];\n\n        return `${xOffset}% ${yOffset}%`;\n    }\n\n    fast_forward() {\n        to_array(document.querySelectorAll('.folder_space')).filter((s) => {\n            return s.childElementCount == 0;\n        }).slice(0, -1).forEach((s) => {\n            const type = s.getAttribute('data-type'),\n                  selector = '.draggable_folder[data-type='+type+']',\n                  matchingFolder = document.querySelector(selector);\n            s.appendChild(matchingFolder);\n        });\n    }\n\n    cleanup(scene) {\n        clearTimeout(this.finish_timeout);\n        clearTimeout(this.messageBoxTimeout);\n        window.fast_forward = undefined;\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class PapaScene extends Scene {\n\n    constructor(part) {\n        super();\n        this.part = part || 'in';\n    }\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('papa');\n\n        if(this.part == 'in') {\n            this.create_in_dialog();\n        } else {\n            this.create_out_dialog();\n        }\n\n        this.dialog.play();\n    }\n\n    dialog_init() {\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"papa\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        return this.dialog;\n    }\n\n    create_in_dialog() {\n        this.dialog_init()\n            .let('finn')\n            .say('Hallo Papa!')\n            .wait(3000)\n\n            .let('papa')\n            .say('Hallo Finn, du kommst gerade richtig! Ich hab hier wieder '\n                    + 'ein paar Ordner, die einsortiert werden müssen. Das '\n                    + 'machst du doch so gerne, oder?')\n            .wait(9000)\n\n            .let('finn')\n            .say('Ja, das kann ich gut!')\n            .wait(3000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    create_out_dialog() {\n        this.dialog_init()\n            .let('finn')\n            .say('Jetzt ist alles wieder aufgeräumt!')\n            .wait(3000)\n\n            .let('papa')\n            .say('Danke Finn, das sieht super aus!')\n            .wait(3000)\n\n            .let('finn')\n            .say('Du Papa… Lucy ist schon wieder weg. Hast du eine Idee, '\n                    + 'wo sie sein könnte?')\n            .wait(5000)\n\n            .let('papa')\n            .say('Hm… Das letzte Mal, als wir Lucy suchen mussten, war sie '\n                    + 'drüben auf Karls Hühnerhof. Hast du dort schon gesucht?')\n            .wait(7000)\n\n            .let('finn')\n            .say('Das ist eine gute Idee, da war ich noch nicht.')\n            .wait(4000)\n\n            .let('papa')\n            .say('Dann lauf mal schnell hin, wir sehen uns heute Abend!')\n            .wait(4000)\n\n            .let('finn')\n            .say('Okay, tschüss!')\n            .wait(2000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","import {create_element} from '../utils';\nimport Scene from './Scene';\nimport Dialog from './Dialog';\n\nexport default class PrefaceScene extends Scene {\n\n    render(scene) {\n        this.scene = scene;\n        scene.classList.add('preface');\n\n        this.create_dialog();\n\n        this.dialog.play();\n    }\n\n    create_dialog() {\n        const self = this;\n        this.dialog = new Dialog();\n        this.scene.appendChild(this.dialog.add_bubble(\"finn\"));\n        this.scene.appendChild(this.dialog.add_bubble(\"narrator\"));\n        this.dialog\n            .do(function() {})\n            .wait(1000)\n\n            .let('narrator')\n            .say('Hallo Finn, was ist denn los? Warum bist du so traurig?')\n            .wait(5000)\n\n            .let('finn')\n            .say('Ich finde meine Katze Lucy nicht mehr. '\n                    + 'Ich habe mit ihr im Garten gespielt. Dann bin ich kurz '\n                    + 'ins Haus gegangen, um etwas zu trinken zu holen und '\n                    + 'als ich wieder in den Garten kam, war sie weg.')\n            .wait(11000)\n\n            .let('narrator')\n            .say('Oh, das ist schade. Hast du sie denn schon gesucht?')\n            .wait(5000)\n\n            .let('finn')\n            .say('Nein, alleine schaffe ich das nicht.')\n            .wait(4000)\n\n            .let('narrator')\n            .say('Das ist kein Problem. Ich hätte hier jemanden, der dir '\n                    + 'sicher gerne hilft')\n            .wait(6000)\n\n            .let('finn')\n            .say('Wirklich? Würdest du mir bei der Suche helfen? '\n                    + 'Das wäre super! Ich hole nur kurz meine Tasche '\n                    + 'und dann können wir los!')\n            .wait(9000)\n\n            .do(function() { })\n            .wait(1500)\n\n            .let('finn')\n            .say('Am besten gehen wir zuerst zu meinem Freund Emil, '\n                    + 'vielleicht hat er sie gesehen.')\n            .wait(5000)\n\n            .do(x => this.story && this.story.next());\n    }\n\n    cleanup(scene) {\n        this.dialog && this.dialog.stop();\n    }\n}\n","export default class Scene {\n    render(scene) {\n    }\n    enable_story_mode(story) {\n        this.story = story;\n    }\n    cleanup(scene) {\n    }\n}\n","import {create_element} from '../utils';\n\nexport default class SceneManager {\n\n    constructor() {\n        this.scene_element = this.create_scene_element();\n        this.scenes = {};\n        this.current_scene = undefined;\n    }\n\n    create_scene_element() {\n        return create_element('div').class('scene').render();\n    }\n\n    clean_scene() {\n\n        if(this.current_scene && this.current_scene.cleanup) {\n            this.current_scene.cleanup(this.scene_element);\n        }\n\n        const new_scene = this.create_scene_element();\n        this.scene_element.parentNode.replaceChild(new_scene, this.scene_element);\n        this.scene_element = new_scene;\n    }\n\n    pushState(scene) {\n        if(!history.pushState) {\n            return;\n        }\n        let queryString = \"?\" + scene.constructor.name;\n        if(scene.part) {\n            queryString += \"/\" + scene.part;\n        }\n\n        history.pushState(null, \"Finns Zahlenabenteuer\", queryString);\n    }\n\n    navigate(scene) {\n        if(!scene || !scene.render || !scene.cleanup) {\n            throw `${scene} is not a scene`;\n        }\n\n        this.clean_scene();\n\n        scene.render(this.scene_element);\n\n        this.current_scene = scene;\n        this.pushState(scene);\n        window.scene = scene;\n    }\n\n    get_scene_element() {\n        return this.scene_element;\n    }\n}\n\nconst scene_manager = new SceneManager();\nwindow.navigate = scene_manager.navigate;\n\nmodule.exports = scene_manager;\n","import interact from 'interactjs';\nimport {range, to_array, shuffle, create_element} from '../utils';\nimport Scene from './Scene';\n\nexport default class ShopGameScene extends Scene {\n\n    render(scene) {\n\n        this.scene = scene;\n        scene.classList.add('shop_game');\n\n        scene.appendChild(this.create_message_box());\n        scene.appendChild(this.create_scale());\n\n        scene.appendChild(this.create_source());\n        scene.appendChild(this.create_finish_button());\n\n        this.shuffle_problems();\n        this.next_problem();\n\n        this.freeze = false;\n    }\n\n    shuffle_problems() {\n        const items = [\"apple\", \"milk\", \"butter\"];\n\n        this.problems = shuffle(range(2, 11)).map(function(i) {\n            return {\n                sum: i,\n                less: Math.floor(Math.random() * i),\n                item: items[Math.floor(Math.random() * items.length)]\n            }\n        });\n    }\n\n    next_problem(problem) {\n        if(this.problems.length > 0) {\n            if(this.problem) {\n                this.source.classList.remove('item_' + this.problem.item);\n                this.source.removeChild(this.source.firstChild);\n            }\n            this.problem = this.problems.pop();\n            this.source.classList.add('item_' + this.problem.item);\n            this.source.appendChild(this.create_item(this.problem.item));\n            this.reset_dishes(this.problem.sum, this.problem.less, this.problem.item);\n            return true;\n        } else {\n            this.problem = undefined;\n\n            if(this.story) {\n                this.finish_timeout = setTimeout(x => this.story.next(), 1000);\n            } else {\n                this.show_message(\"Sehr gut! Du hast alle Aufgaben gelöst!\");\n            }\n\n            return false;\n        }\n    }\n\n    create_message_box() {\n        const box = create_element('div')\n                .class('message_box')\n                .render();\n        this.message_box = box;\n        return box;\n    }\n\n    show_message(message) {\n        const box = this.message_box;\n        box.textContent = message;\n        box.classList.add('active');\n        clearTimeout(this.message_box_timeout);\n        this.message_box_timeout = setTimeout(function() {\n            box.classList.remove('active');\n        }, 3000);\n    }\n\n    check_finish() {\n        if(this.freeze) {\n            return;\n        }\n\n        const self = this,\n            {sum} = self.problem,\n            right_count = self.right_dish.childElementCount;\n\n        if(sum == right_count) {\n            self.freeze = true;\n            self.show_message(\"Richtig!\");\n            setTimeout(function() { \n                if(self.next_problem()) {\n                    self.freeze = false;\n                }\n            }, 3000);\n        } else {\n            self.show_message(\"Leider falsch. Schau nochmal genau hin!\");\n        }\n    }\n\n    create_scale() {\n        const self = this,\n            scale = create_element('div').class('scale');\n\n        self.left_dish = create_element('div')\n                .class('dish')\n                .class('dish_left')\n                .attr('data-dish', 'left')\n                .render();\n        self.right_dish = create_element('div')\n                .class('dish')\n                .class('dish_right')\n                .attr('data-dish', 'right')\n                .render();\n\n        interact(self.right_dish).dropzone({\n            ondragenter: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.add('drop-target');\n            },\n            ondragleave: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('drop-target');\n            },\n            ondropdeactivate: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.classList.remove('drop-target');\n            }\n        });\n\n        scale.adopt(create_element('div')\n                .class('lever')\n                .adopt(create_element('div')\n                        .class('needle')\n                        .render())\n                .render());\n        scale.adopt(create_element('div')\n                .class('pillar')\n                .render());\n        scale.adopt(self.left_dish);\n        scale.adopt(self.right_dish);\n\n        return scale.render();\n    }\n\n    reset_dishes(left_count, right_count, item_type) {\n        const self = this;\n\n        while(self.left_dish.firstChild) {\n            self.left_dish.removeChild(self.left_dish.firstChild);\n        }\n        while(self.right_dish.firstChild) {\n            self.right_dish.removeChild(self.right_dish.firstChild);\n        }\n\n        range(left_count).forEach(function(i) {\n            self.left_dish.appendChild(self.create_item(item_type, true));\n        });\n\n        range(right_count).forEach(function(i) {\n            self.right_dish.appendChild(self.create_item(item_type));\n        });\n    }\n\n    create_source() {\n        this.source = create_element('div')\n                    .class('source')\n                    .class('item')\n                    .attr('data-type', 'source')\n                    .render();\n        return this.source;\n    }\n\n    create_item(type, fixed) {\n        const self = this,\n            item = create_element('div')\n                .class('item')\n                .class('item_' + type)\n                .attr('data-type', type)\n                .render();\n\n        !fixed && interact(item).draggable({\n            onstart: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n            },\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const target = e.target,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const item = e.target,\n                      dish = e.interaction.dropElement,\n                      parent = item.parentNode;\n\n                if(dish == null || dish.childElementCount >= 10) {\n                    parent.removeChild(item);\n                } else {\n                    item.removeAttribute('data-x');\n                    item.removeAttribute('data-y');\n                    item.style.removeProperty('transform');\n\n                    dish.appendChild(item);\n                }\n\n                if(parent.getAttribute('data-type', 'source')) {\n                    const new_item = self.create_item(\n                            item.getAttribute('data-type'));\n                    self.source.appendChild(new_item);\n                }\n            }\n        }).styleCursor(false);\n\n        return item;\n    }\n\n    create_finish_button() {\n        return create_element('button')\n                    .class('finish_button')\n                    .text(\"Wiegen!\")\n                    .click(this.check_finish.bind(this))\n                    .render();\n    }\n\n    cleanup(scene) {\n        this.problem = undefined;\n    }\n}\n","import interact from 'interactjs';\nimport {range, to_array, shuffle, create_element} from '../utils';\nimport Scene from './Scene';\n\nexport default class TreehouseGameScene extends Scene {\n\n    render(scene) {\n\n        this.scene = scene;\n        scene.classList.add('treehouse_game');\n\n        scene.appendChild(this.create_message_box());\n        scene.appendChild(this.create_problem_field());\n        scene.appendChild(this.create_toolbox());\n\n        scene.appendChild(this.create_sink());\n        scene.appendChild(this.create_finish_button());\n\n        this.shuffle_problems();\n        this.next_problem();\n    }\n\n    shuffle_problems() {\n        this.problems = shuffle(range(2, 11));\n        console.log(this.problems);\n    }\n\n    next_problem(problem) {\n        if(this.problems.length > 0) {\n            this.problem = this.problems.pop();\n            this.problem_field.textContent = `Suche ${this.problem} Nägel`;\n            return true;\n        } else {\n            this.problem = undefined;\n            this.problem_field.textContent = \"\";\n\n            if(this.story) {\n                this.finish_timeout = setTimeout(x => this.story.next(), 1000);\n            } else {\n                this.show_message(\"Sehr gut! Du hast alle Aufgaben gelöst!\");\n            }\n\n            return false;\n        }\n    }\n\n    create_message_box() {\n        const box = create_element('div')\n                .class('message_box')\n                .render();\n        this.message_box = box;\n        return box;\n    }\n\n    show_message(message) {\n        const box = this.message_box;\n        box.textContent = message;\n        box.classList.add('active');\n        clearTimeout(this.message_box_timeout);\n        this.message_box_timeout = setTimeout(function() {\n            box.classList.remove('active');\n        }, 3000);\n    }\n\n    check_finish() {\n        const nail_count = this.sink.childElementCount;\n\n        if(this.freeze) {\n            return;\n        }\n\n        if(nail_count == this.problem) {\n            this.freeze = true;\n            this.show_message(\"Richtig!\");\n            setTimeout(x => { \n                this.clear_sink();\n                if(this.next_problem()) {\n                    this.freeze = false;\n                }\n            }, 3000);\n        } else {\n            this.show_message(\"Leider falsch. Schau nochmal genau hin!\");\n        }\n    }\n\n    create_problem_field() {\n        this.problem_field = create_element('div')\n                .class('problem_field')\n                .render();\n        return this.problem_field;\n    }\n\n    create_toolbox() {\n        const self = this,\n              box = create_element('div').class('toolbox').render();\n\n        interact(box).draggable({\n            onstart: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const nail = self.create_nail(),\n                    parentOffset = e.target.getBoundingClientRect();\n\n                e.interaction.nail = nail;\n                e.target.appendChild(nail);\n\n                const nailOffset = nail.getBoundingClientRect(),\n                    left = e.x0 - parentOffset.left - nailOffset.width / 2,\n                    top = e.y0 - parentOffset.top - nailOffset.height / 2;\n\n                nail.style.setProperty(\"left\", left + \"px\");\n                nail.style.setProperty(\"top\", top + \"px\");\n            },\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const target = e.interaction.nail,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const nail = e.interaction.nail,\n                      sink = e.interaction.dropElement;\n\n                if(sink == null) {\n                    nail.parentElement.removeChild(nail);\n                } else {\n                    const sinkOffset = sink.getBoundingClientRect(),\n                          nailOffset = nail.getBoundingClientRect(),\n                          minLeft = sinkOffset.width * 0.02,\n                          minTop = sinkOffset.height * 0.02,\n                          maxLeft = (sinkOffset.width - nailOffset.width) * 0.98,\n                          maxTop = (sinkOffset.height - nailOffset.height) * 0.98;\n\n                    let left = nailOffset.left - sinkOffset.left,\n                        top = nailOffset.top - sinkOffset.top;\n\n                    left = Math.max(minLeft, Math.min(left, maxLeft));\n                    top = Math.max(minTop, Math.min(top, maxTop));\n\n                    nail.removeAttribute('data-x');\n                    nail.removeAttribute('data-y');\n                    nail.style.removeProperty('transform');\n                    nail.style.setProperty('left', left + \"px\");\n                    nail.style.setProperty('top', top + \"px\");\n                    sink.appendChild(nail);\n                    self.make_nail_draggable(nail);\n                }\n            }\n        }).styleCursor(false);\n\n        return box;\n    }\n\n    create_nail() {\n        return create_element('div').class('nail').render();\n    }\n\n    make_nail_draggable(nail) {\n        interact(nail).draggable({\n            onstart: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                e.target.parentElement.appendChild(e.target);\n            },\n            onmove: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const target = e.target,\n                    x = (parseFloat(target.getAttribute(\"data-x\")) || 0) + e.dx,\n                    y = (parseFloat(target.getAttribute(\"data-y\")) || 0) + e.dy;\n\n                target.style.transform = `translate(${x}px, ${y}px)`;\n                target.setAttribute('data-x', x);\n                target.setAttribute('data-y', y);\n            },\n            onend: function(e) {\n                if(self.freeze) {\n                    return;\n                }\n                const nail = e.target,\n                      dropzone = e.interaction.dropElement;\n\n                if(dropzone != null && dropzone.getAttribute('data-type') == 'sink') {\n                    const sinkOffset = dropzone.getBoundingClientRect(),\n                          nailOffset = nail.getBoundingClientRect(),\n                          minLeft = sinkOffset.width * 0.02,\n                          minTop = sinkOffset.height * 0.02,\n                          maxLeft = (sinkOffset.width - nailOffset.width) * 0.98,\n                          maxTop = (sinkOffset.height - nailOffset.height) * 0.98;\n\n                    let left = nailOffset.left - sinkOffset.left,\n                        top = nailOffset.top - sinkOffset.top;\n\n                    left = Math.max(minLeft, Math.min(left, maxLeft));\n                    top = Math.max(minTop, Math.min(top, maxTop));\n\n                    nail.removeAttribute('data-x');\n                    nail.removeAttribute('data-y');\n                    nail.style.removeProperty('transform');\n                    nail.style.setProperty('left', left + \"px\");\n                    nail.style.setProperty('top', top + \"px\");\n                } else {\n                    nail.parentElement.removeChild(nail);\n                }\n            }\n        }).styleCursor(false);\n    }\n\n    create_sink() {\n        const sink = create_element('div')\n                    .class('sink')\n                    .attr('data-type', 'sink')\n                    .render();\n\n        this.sink = sink;\n\n        interact(sink).dropzone({});\n\n        return sink;\n    }\n\n    clear_sink() {\n        while(this.sink.firstChild) {\n            this.sink.removeChild(this.sink.firstChild);\n        }\n    }\n\n    create_finish_button() {\n        return create_element('button')\n                    .class('finish_button')\n                    .text(\"Fertig, zählen!\")\n                    .click(this.check_finish.bind(this))\n                    .render();\n    }\n\n    cleanup(scene) {\n        if(this.finish_timeout !== undefined) {\n            clearTimeout(this.finish_timeout);\n        }\n    }\n}\n","export function range(startOrEnd, end = null, step = 1) {\n\n    if(arguments.length < 1) {\n        end = 0;\n        startOrEnd = 0;\n    } else if(end === null) {\n        end = startOrEnd;\n        startOrEnd = 0;\n    }\n\n    var range = [];\n\n    while(startOrEnd != end) {\n        range.push(startOrEnd);\n        startOrEnd += step;\n    }\n    return range;\n}\n\nexport function shuffle(arr) {\n    const shuffled = [],\n          array = arr.slice(0);\n\n    let rand;\n\n    while(array.length > 0) {\n        rand = Math.floor(Math.random() * array.length);\n        shuffled.push(array.splice(rand, 1)[0]);\n    }\n\n    return shuffled;\n}\n\nclass DomElementDraft {\n    constructor(tag) {\n        this.el = document.createElement(tag);\n    }\n    class(clazz) {\n        this.el.classList.add(clazz);\n        return this;\n    }\n    id(id) {\n        this.el.setAttribute('id', id);\n        return this;\n    }\n    attr(name, value) {\n        this.el.setAttribute(name, value);\n        return this;\n    }\n    style(property, value) {\n        this.el.style.setProperty(property, value);\n        return this;\n    }\n    text(text) {\n        this.el.textContent = text;\n        return this;\n    }\n    adopt(child) {\n        this.el.appendChild(child);\n        return this;\n    }\n    click(func) {\n        this.el.addEventListener('click', func);\n        return this;\n    }\n    render() {\n        return this.el;\n    }\n}\n\nexport function create_element(tag) {\n    return new DomElementDraft(tag);\n}\n\nexport function to_array(array_like) {\n    return Array.prototype.slice.call(array_like);\n}\n\nexport function check_args() {\n    for(let i = 1; i < arguments.length; i++) {\n        if(arguments[i] != typeof(arguments[0][i-1])) {\n            return false;\n        }\n    }\n    return true;\n}\n"]}